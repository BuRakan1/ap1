def export_official_completion(self):
    """تصدير التكميل الرسمي للدورات إلى Excel"""
    if not self.current_user["permissions"]["can_export_data"]:
        messagebox.showwarning("تنبيه", "ليس لديك صلاحية تصدير البيانات")
        return

    try:
        # التحقق من تواريخ انتهاء جميع الدورات
        current_date = datetime.datetime.now().date()
        cursor = self.conn.cursor()

        # الحصول على الدورات التي تجاوزت تاريخ النهاية
        cursor.execute("""
            SELECT course_name, end_date_system
            FROM course_info
            WHERE end_date_system IS NOT NULL AND end_date_system != ''
        """)

        expired_courses = []
        for course_name, end_date_str in cursor.fetchall():
            try:
                end_date = datetime.datetime.strptime(end_date_str, "%Y-%m-%d").date()
                if current_date > end_date:
                    expired_courses.append(course_name)
            except:
                continue

        if expired_courses:
            courses_list = "\n".join(f"- {course}" for course in expired_courses)
            messagebox.showwarning(
                "دورات منتهية",
                f"لا يمكن تصدير التكميل الرسمي لوجود دورات انتهت ولم يتم تخريجها:\n\n{courses_list}\n\n"
                "يجب تخريج هذه الدورات من النظام أولاً"
            )
            return

        # الحصول على تاريخ التصدير المطلوب من صفحة استعراض الحضور
        selected_date = self.log_date_entry.get_date().strftime("%Y-%m-%d")

        # التحقق من وجود سجلات حضور في التاريخ المحدد
        cursor.execute("""
            SELECT COUNT(*) 
            FROM attendance 
            WHERE date = ?
        """, (selected_date,))

        attendance_count = cursor.fetchone()[0]

        if attendance_count == 0:
            messagebox.showwarning(
                "لا توجد سجلات",
                f"لا توجد سجلات حضور بتاريخ {selected_date}\n"
                "يجب تسجيل الحضور أولاً قبل تصدير التكميل الرسمي"
            )
            return

        # التحقق من المتدربين غير المسجلين في التاريخ المحدد
        cursor.execute("""
            SELECT COUNT(*)
            FROM trainees t
            WHERE (t.is_excluded = 0 OR (t.is_excluded = 1 AND t.excluded_date > ?))
            AND t.course != '' AND t.course IS NOT NULL
            AND t.national_id NOT IN (
                SELECT a.national_id 
                FROM attendance a 
                WHERE a.date = ?
            )
        """, (selected_date, selected_date))

        unregistered_count = cursor.fetchone()[0]

        if unregistered_count > 0:
            # الحصول على أسماء بعض المتدربين غير المسجلين للعرض
            cursor.execute("""
                SELECT t.name, t.course
                FROM trainees t
                WHERE (t.is_excluded = 0 OR (t.is_excluded = 1 AND t.excluded_date > ?))
                AND t.course != '' AND t.course IS NOT NULL
                AND t.national_id NOT IN (
                    SELECT a.national_id 
                    FROM attendance a 
                    WHERE a.date = ?
                )
                LIMIT 5
            """, (selected_date, selected_date))

            unregistered_students = cursor.fetchall()

            # بناء رسالة التنبيه
            message = f"لا يمكن تصدير التكميل الرسمي\n\n"
            message += f"يوجد عدد ({unregistered_count}) متدرب غير مسجل حضورهم بتاريخ {selected_date}\n\n"

            if unregistered_students:
                message += "المتدربين الغير المسجلين هم :\n"
                for i, (name, course) in enumerate(unregistered_students[:5]):
                    message += f"{i + 1}. {name} - دورة: {course}\n"

                if unregistered_count > 5:
                    message += f"\n... وغيرهم ({unregistered_count - 5} متدرب آخر)\n"

            message += "\nيجب تسجيل حضور جميع المتدربين أولاً"

            messagebox.showwarning("متدربين غير مسجلين", message)
            return

        # اختيار مسار الحفظ
        export_file = filedialog.asksaveasfilename(
            defaultextension=".xlsx",
            filetypes=[("Excel files", "*.xlsx")],
            initialfile=f"التكميل_الرسمي_{selected_date}.xlsx"
        )

        if not export_file:
            return

        # الحصول على بيانات جميع الدورات النشطة أو المستبعدة بعد التاريخ المحدد
        cursor.execute("""
            SELECT DISTINCT t.course, COALESCE(ci.course_category, 'مشتركة') as category
            FROM trainees t
            LEFT JOIN course_info ci ON t.course = ci.course_name
            WHERE (t.is_excluded = 0 OR (t.is_excluded = 1 AND t.excluded_date > ?))
            AND t.course != '' AND t.course IS NOT NULL
            ORDER BY t.course
        """, (selected_date,))

        courses_data = cursor.fetchall()

        if not courses_data:
            messagebox.showinfo("تنبيه", "لا توجد دورات نشطة لتصدير التكميل الرسمي")
            return

        # حساب الإحصائيات لكل فئة (حذف فئة "طلبة")
        categories = ["ضباط", "أفراد", "مشتركة", "مدنيين"]
        stats = {cat: {
            'courses': set(),
            'students': 0,
            'absent': 0,
            'late': 0,
            'sick_leave': 0,
            'not_started': 0
        } for cat in categories}

        # جمع البيانات لليوم المحدد فقط
        for course_name, course_category in courses_data:
            if course_category not in categories:
                course_category = "مشتركة"  # القيمة الافتراضية

            stats[course_category]['courses'].add(course_name)

            # عدد المتدربين في الدورة (شامل الذين تم استبعادهم بعد التاريخ المحدد)
            cursor.execute("""
                SELECT COUNT(*) FROM trainees
                WHERE course = ? 
                AND (is_excluded = 0 OR (is_excluded = 1 AND excluded_date > ?))
            """, (course_name, selected_date))
            stats[course_category]['students'] += cursor.fetchone()[0]

            # إحصائيات الحضور لليوم المحدد فقط
            cursor.execute("""
                SELECT 
                    SUM(CASE WHEN a.status = 'غائب' THEN 1 ELSE 0 END) as absent,
                    SUM(CASE WHEN a.status = 'متأخر' THEN 1 ELSE 0 END) as late,
                    SUM(CASE WHEN a.status = 'منوم' THEN 1 ELSE 0 END) as sick,
                    SUM(CASE WHEN a.status = 'لم يباشر' THEN 1 ELSE 0 END) as not_started,
                    SUM(CASE WHEN a.status = 'حالة وفاة' THEN 1 ELSE 0 END) as death_case
                FROM attendance a
                JOIN trainees t ON a.national_id = t.national_id
                WHERE t.course = ? 
                AND (t.is_excluded = 0 OR (t.is_excluded = 1 AND t.excluded_date > ?))
                AND a.date = ?
            """, (course_name, selected_date, selected_date))

            result = cursor.fetchone()
            if result:
                # حالة الوفاة تُحسب مع الغياب
                stats[course_category]['absent'] += (result[0] or 0) + (result[4] or 0)
                stats[course_category]['late'] += result[1] or 0
                stats[course_category]['sick_leave'] += result[2] or 0  # منوم فقط
                stats[course_category]['not_started'] += result[3] or 0

        # إنشاء DataFrame للإحصائيات
        stats_data = []
        row_labels = ["عدد الدورات", "عدد الملتحقين", "الغياب", "تأخير", "إجازة مرضية", "لم يباشر", "المجموع"]

        for i, label in enumerate(row_labels):
            row = {"م": label}
            for category in categories:
                cat_stats = stats[category]
                if label == "عدد الدورات":
                    row[category] = len(cat_stats['courses'])
                elif label == "عدد الملتحقين":
                    row[category] = cat_stats['students']
                elif label == "الغياب":
                    row[category] = cat_stats['absent']
                elif label == "تأخير":
                    row[category] = cat_stats['late']
                elif label == "إجازة مرضية":
                    row[category] = cat_stats['sick_leave']
                elif label == "لم يباشر":
                    row[category] = cat_stats['not_started']
                elif label == "المجموع":
                    # حساب المجموع = عدد الملتحقين - (الغياب + التأخير + الإجازة المرضية + لم يباشر)
                    total = cat_stats['students'] - (cat_stats['absent'] + cat_stats['late'] +
                                                     cat_stats['sick_leave'] + cat_stats['not_started'])
                    row[category] = total
            stats_data.append(row)

        df_stats = pd.DataFrame(stats_data)

        # إنشاء DataFrame للتفاصيل لليوم المحدد فقط
        details_data = []
        row_num = 1

        # الغياب والتأخير والإجازات المرضية لليوم المحدد
        cursor.execute("""
            SELECT t.name, t.national_id, a.status, COALESCE(ci.course_category, 'مشتركة') as category
            FROM attendance a
            JOIN trainees t ON a.national_id = t.national_id
            LEFT JOIN course_info ci ON t.course = ci.course_name
            WHERE a.status IN ('غائب', 'متأخر', 'منوم', 'حالة وفاة')
            AND (t.is_excluded = 0 OR (t.is_excluded = 1 AND t.excluded_date > ?))
            AND a.date = ?
            ORDER BY a.status, t.name
        """, (selected_date, selected_date))

        for name, national_id, status, category in cursor.fetchall():
            # تحديد الملاحظة
            if status == "غائب":
                note = f"غياب {category}"
            elif status == "متأخر":
                note = f"تأخير {category}"
            elif status == "منوم":
                note = f"إجازة مرضية {category}"
            elif status == "حالة وفاة":
                note = f"غياب {category} - حالة وفاة"

            details_data.append({
                "العدد": row_num,
                "الاسم": name,
                "رقم الهوية": national_id,
                "ملاحظة": note
            })
            row_num += 1

        # إضافة سطر فارغ
        details_data.append({"العدد": "", "الاسم": "", "رقم الهوية": "", "ملاحظة": ""})
        details_data.append({"العدد": "", "الاسم": "", "رقم الهوية": "", "ملاحظة": ""})

        # "لم يباشر" في الأسفل لليوم المحدد
        cursor.execute("""
            SELECT t.name, t.national_id, COALESCE(ci.course_category, 'مشتركة') as category
            FROM attendance a
            JOIN trainees t ON a.national_id = t.national_id
            LEFT JOIN course_info ci ON t.course = ci.course_name
            WHERE a.status = 'لم يباشر'
            AND (t.is_excluded = 0 OR (t.is_excluded = 1 AND t.excluded_date > ?))
            AND a.date = ?
            ORDER BY t.name
        """, (selected_date, selected_date))

        for name, national_id, category in cursor.fetchall():
            details_data.append({
                "العدد": row_num,
                "الاسم": name,
                "رقم الهوية": national_id,
                "ملاحظة": f"لم يباشر {category}"
            })
            row_num += 1

        df_details = pd.DataFrame(details_data)

        # كتابة البيانات إلى Excel
        with pd.ExcelWriter(export_file, engine='openpyxl') as writer:
            # كتابة صفحة الإحصائيات
            df_stats.to_excel(writer, sheet_name='الإحصائيات', index=False, startrow=2)

            # كتابة صفحة التفاصيل
            df_details.to_excel(writer, sheet_name='التفاصيل', index=False, startrow=2)

            # تنسيق الصفحات
            workbook = writer.book

            # الحصول على اليوم والتاريخ
            selected_date_obj = self.log_date_entry.get_date()
            day_name = selected_date_obj.strftime('%A')
            # تحويل اسم اليوم إلى العربية
            days_arabic = {
                'Sunday': 'الأحد',
                'Monday': 'الاثنين',
                'Tuesday': 'الثلاثاء',
                'Wednesday': 'الأربعاء',
                'Thursday': 'الخميس',
                'Friday': 'الجمعة',
                'Saturday': 'السبت'
            }
            day_arabic = days_arabic.get(day_name, day_name)
            date_formatted = selected_date_obj.strftime('%Y/%m/%d')

            # تنسيق صفحة الإحصائيات
            stats_sheet = workbook['الإحصائيات']
            stats_sheet.sheet_view.rightToLeft = True

            # إضافة العنوان الرئيسي - تأكد من دمج الخلايا الصحيحة فقط
            stats_sheet.merge_cells('A1:E1')  # من A إلى E فقط (5 أعمدة: م + 4 فئات)
            stats_sheet[
                'A1'] = f"التكميل اليومي لدورات التخصصية المنعقدة بمدنية تدريب الأمن العام بالمنطقة الشرقية ليوم {day_arabic} الموافق {date_formatted}"
            stats_sheet['A1'].font = openpyxl.styles.Font(bold=True, size=14)
            stats_sheet['A1'].alignment = openpyxl.styles.Alignment(horizontal="center", vertical="center",
                                                                    wrap_text=True)
            stats_sheet['A1'].fill = openpyxl.styles.PatternFill(start_color="E0E0E0", end_color="E0E0E0",
                                                                 fill_type="solid")

            # تنسيق الرؤوس - فقط 5 أعمدة
            for row in stats_sheet['A3:E3']:
                for cell in row:
                    cell.font = openpyxl.styles.Font(bold=True, size=12)
                    cell.fill = openpyxl.styles.PatternFill(start_color="4CAF50", end_color="4CAF50",
                                                            fill_type="solid")
                    cell.font = openpyxl.styles.Font(bold=True, color="FFFFFF", size=12)
                    cell.alignment = openpyxl.styles.Alignment(horizontal="center", vertical="center")
                    cell.border = openpyxl.styles.Border(
                        left=openpyxl.styles.Side(style='thin'),
                        right=openpyxl.styles.Side(style='thin'),
                        top=openpyxl.styles.Side(style='thin'),
                        bottom=openpyxl.styles.Side(style='thin')
                    )

            # تنسيق البيانات - فقط 5 أعمدة
            for row in stats_sheet.iter_rows(min_row=4, max_row=stats_sheet.max_row, min_col=1, max_col=5):
                for cell in row:
                    cell.alignment = openpyxl.styles.Alignment(horizontal="center", vertical="center")
                    cell.border = openpyxl.styles.Border(
                        left=openpyxl.styles.Side(style='thin'),
                        right=openpyxl.styles.Side(style='thin'),
                        top=openpyxl.styles.Side(style='thin'),
                        bottom=openpyxl.styles.Side(style='thin')
                    )
                    # تنسيق العمود الأول (التسميات)
                    if cell.column == 1:
                        cell.font = openpyxl.styles.Font(bold=True)
                        cell.fill = openpyxl.styles.PatternFill(start_color="E0E0E0", end_color="E0E0E0",
                                                                fill_type="solid")

            # ضبط عرض الأعمدة بطريقة صحيحة - 5 أعمدة فقط
            column_widths = {'A': 20, 'B': 15, 'C': 15, 'D': 15, 'E': 15}
            for col_letter, width in column_widths.items():
                stats_sheet.column_dimensions[col_letter].width = width

            # تنسيق صفحة التفاصيل
            details_sheet = workbook['التفاصيل']
            details_sheet.sheet_view.rightToLeft = True

            # إضافة العنوان الرئيسي
            details_sheet.merge_cells('A1:D1')
            details_sheet['A1'] = f"إيضاح و ملاحظات التكميل ليوم {day_arabic} و تاريخ {date_formatted}"
            details_sheet['A1'].font = openpyxl.styles.Font(bold=True, size=14)
            details_sheet['A1'].alignment = openpyxl.styles.Alignment(horizontal="center", vertical="center",
                                                                      wrap_text=True)
            details_sheet['A1'].fill = openpyxl.styles.PatternFill(start_color="E0E0E0", end_color="E0E0E0",
                                                                   fill_type="solid")

            # تنسيق الرؤوس
            for row in details_sheet['A3:D3']:
                for cell in row:
                    cell.font = openpyxl.styles.Font(bold=True, size=12)
                    cell.fill = openpyxl.styles.PatternFill(start_color="4CAF50", end_color="4CAF50",
                                                            fill_type="solid")
                    cell.font = openpyxl.styles.Font(bold=True, color="FFFFFF", size=12)
                    cell.alignment = openpyxl.styles.Alignment(horizontal="center", vertical="center")
                    cell.border = openpyxl.styles.Border(
                        left=openpyxl.styles.Side(style='thin'),
                        right=openpyxl.styles.Side(style='thin'),
                        top=openpyxl.styles.Side(style='thin'),
                        bottom=openpyxl.styles.Side(style='thin')
                    )

            # تنسيق البيانات
            for row in details_sheet.iter_rows(min_row=4, max_row=details_sheet.max_row, min_col=1, max_col=4):
                for cell in row:
                    cell.alignment = openpyxl.styles.Alignment(horizontal="center", vertical="center")
                    cell.border = openpyxl.styles.Border(
                        left=openpyxl.styles.Side(style='thin'),
                        right=openpyxl.styles.Side(style='thin'),
                        top=openpyxl.styles.Side(style='thin'),
                        bottom=openpyxl.styles.Side(style='thin')
                    )

            # ضبط عرض الأعمدة
            details_sheet.column_dimensions['A'].width = 10
            details_sheet.column_dimensions['B'].width = 30
            details_sheet.column_dimensions['C'].width = 20
            details_sheet.column_dimensions['D'].width = 25

        messagebox.showinfo("نجاح", f"تم تصدير التكميل الرسمي ليوم {day_arabic} بنجاح إلى:\n{export_file}")

        # فتح الملف
        try:
            os.startfile(export_file)
        except:
            pass

    except Exception as e:
        messagebox.showerror("خطأ", f"حدث خطأ أثناء تصدير التكميل الرسمي: {str(e)}")

def show_unregistered_students(self):
    """عرض المتدربين الذين لم يتم تسجيلهم في تاريخ معين مع إمكانية التصفية حسب الدورة"""
    # الحصول على التاريخ المحدد
    selected_date = self.date_entry.get_date().strftime("%Y-%m-%d")

    # إنشاء نافذة جديدة
    unregistered_window = tk.Toplevel(self.root)
    unregistered_window.title(f"المتدربين غير المسجلين بتاريخ {selected_date}")
    unregistered_window.geometry("800x600")
    unregistered_window.configure(bg=self.colors["light"])

    # توسيط النافذة
    x = (unregistered_window.winfo_screenwidth() - 800) // 2
    y = (unregistered_window.winfo_screenheight() - 600) // 2
    unregistered_window.geometry(f"800x600+{x}+{y}")

    # عنوان النافذة
    tk.Label(
        unregistered_window,
        text=f"المتدربين غير المسجلين بتاريخ {selected_date}",
        font=self.fonts["title"],
        bg=self.colors["primary"],
        fg="white",
        padx=10, pady=10
    ).pack(fill=tk.X)

    # إطار اختيار الدورة
    filter_frame = tk.Frame(unregistered_window, bg=self.colors["light"], padx=10, pady=10)
    filter_frame.pack(fill=tk.X)

    tk.Label(
        filter_frame,
        text="اختر الدورة:",
        font=self.fonts["text_bold"],
        bg=self.colors["light"]
    ).pack(side=tk.RIGHT, padx=10)

    # الحصول على قائمة الدورات المتاحة
    cursor = self.conn.cursor()
    cursor.execute("SELECT DISTINCT course FROM trainees WHERE is_excluded=0 ORDER BY course")
    courses = ["جميع الدورات"] + [row[0] for row in cursor.fetchall() if row[0]]

    course_var = tk.StringVar(value="جميع الدورات")
    course_combo = ttk.Combobox(
        filter_frame,
        textvariable=course_var,
        values=courses,
        state="readonly",
        width=30,
        font=self.fonts["text"]
    )
    course_combo.pack(side=tk.RIGHT, padx=5)

    # متغيرات التصفح المحدود
    page_size = 100
    current_page = 1

    # زر تطبيق التصفية
    filter_btn = tk.Button(
        filter_frame,
        text="تطبيق",
        font=self.fonts["text_bold"],
        bg=self.colors["primary"],
        fg="white",
        padx=10, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=lambda: load_students(1)  # عند تغيير الدورة، ابدأ من الصفحة الأولى
    )
    filter_btn.pack(side=tk.LEFT, padx=5)

    # إطار النتائج والتصفح
    result_frame = tk.Frame(unregistered_window, bg=self.colors["light"], padx=10, pady=10)
    result_frame.pack(fill=tk.BOTH, expand=True)

    # إطار القائمة
    list_frame = tk.Frame(result_frame, bg=self.colors["light"])
    list_frame.pack(fill=tk.BOTH, expand=True)

    # شريط التمرير للقائمة
    list_scroll = tk.Scrollbar(list_frame)
    list_scroll.pack(side=tk.RIGHT, fill=tk.Y)

    # إنشاء قائمة المتدربين
    students_tree = ttk.Treeview(
        list_frame,
        columns=("id", "name", "rank", "course"),
        show="headings",
        yscrollcommand=list_scroll.set,
        style="Bold.Treeview"
    )

    # تعريف أعمدة الجدول
    students_tree.column("id", width=120, anchor=tk.CENTER)
    students_tree.column("name", width=200, anchor=tk.CENTER)
    students_tree.column("rank", width=100, anchor=tk.CENTER)
    students_tree.column("course", width=150, anchor=tk.CENTER)

    # تعريف عناوين الأعمدة
    students_tree.heading("id", text="رقم الهوية")
    students_tree.heading("name", text="الاسم")
    students_tree.heading("rank", text="الرتبة")
    students_tree.heading("course", text="اسم الدورة")

    students_tree.pack(fill=tk.BOTH, expand=True)
    list_scroll.config(command=students_tree.yview)

    # متغير لحفظ ملصق عدد المتدربين
    students_count_var = tk.StringVar(value="إجمالي عدد المتدربين غير المسجلين: 0")
    students_count_label = tk.Label(
        result_frame,
        textvariable=students_count_var,
        font=self.fonts["text_bold"],
        bg=self.colors["light"],
        fg=self.colors["primary"],
        pady=5
    )
    students_count_label.pack(fill=tk.X)

    # إطار أزرار التصفح
    pagination_frame = tk.Frame(result_frame, bg=self.colors["light"])
    pagination_frame.pack(fill=tk.X, pady=5)

    # عناصر التصفح
    prev_btn = tk.Button(
        pagination_frame,
        text="السابق",
        font=self.fonts["text_bold"],
        bg=self.colors["secondary"],
        fg="white",
        padx=10, pady=2,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=lambda: change_page(-1)
    )
    prev_btn.pack(side=tk.LEFT, padx=5)

    page_var = tk.StringVar(value="الصفحة 1")
    page_label = tk.Label(
        pagination_frame,
        textvariable=page_var,
        font=self.fonts["text_bold"],
        bg=self.colors["light"]
    )
    page_label.pack(side=tk.LEFT, padx=10)

    next_btn = tk.Button(
        pagination_frame,
        text="التالي",
        font=self.fonts["text_bold"],
        bg=self.colors["secondary"],
        fg="white",
        padx=10, pady=2,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=lambda: change_page(1)
    )
    next_btn.pack(side=tk.LEFT, padx=5)

    # زر الإغلاق
    tk.Button(
        unregistered_window,
        text="إغلاق",
        font=self.fonts["text_bold"],
        bg=self.colors["dark"],
        fg="white",
        padx=15, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=unregistered_window.destroy
    ).pack(side=tk.BOTTOM, pady=10)

    # متغيرات لتتبع عدد الصفحات والصفحة الحالية
    total_pages = 1

    def change_page(delta):
        """تغيير الصفحة الحالية"""
        nonlocal current_page
        new_page = current_page + delta

        if 1 <= new_page <= total_pages:
            current_page = new_page
            load_students(current_page)

    # دالة لتحميل المتدربين حسب الدورة المحددة والصفحة
    def load_students(page=1):
        nonlocal current_page, total_pages
        current_page = page

        # مسح البيانات الحالية
        for item in students_tree.get_children():
            students_tree.delete(item)

        # إعداد الاستعلام حسب الدورة المحددة
        selected_course = course_var.get()

        # استعلام العدد الإجمالي أولاً
        count_query = ""
        count_params = []

        if selected_course == "جميع الدورات":
            # استعلام لجميع الدورات
            count_query = """
                SELECT COUNT(*)
                FROM trainees t
                WHERE t.is_excluded = 0
                AND t.national_id NOT IN (
                    SELECT national_id FROM attendance WHERE date = ?
                )
            """
            count_params = [selected_date]
        else:
            # استعلام للدورة المحددة فقط
            count_query = """
                SELECT COUNT(*)
                FROM trainees t
                WHERE t.is_excluded = 0
                AND t.course = ?
                AND t.national_id NOT IN (
                    SELECT national_id FROM attendance WHERE date = ?
                )
            """
            count_params = [selected_course, selected_date]

        # تنفيذ استعلام العدد
        cursor.execute(count_query, count_params)
        total_count = cursor.fetchone()[0]

        # حساب عدد الصفحات
        total_pages = max(1, (total_count + page_size - 1) // page_size)

        # تحديث متغيرات التصفح
        page_var.set(f"الصفحة {current_page} من {total_pages}")
        students_count_var.set(f"إجمالي عدد المتدربين غير المسجلين: {total_count}")

        # بناء استعلام المتدربين مع حدود الصفحة
        offset = (current_page - 1) * page_size

        query = ""
        params = []

        if selected_course == "جميع الدورات":
            query = """
                SELECT t.national_id, t.name, t.rank, t.course
                FROM trainees t
                WHERE t.is_excluded = 0
                AND t.national_id NOT IN (
                    SELECT national_id FROM attendance WHERE date = ?
                )
                ORDER BY t.course, t.name
                LIMIT ? OFFSET ?
            """
            params = [selected_date, page_size, offset]
        else:
            query = """
                SELECT t.national_id, t.name, t.rank, t.course
                FROM trainees t
                WHERE t.is_excluded = 0
                AND t.course = ?
                AND t.national_id NOT IN (
                    SELECT national_id FROM attendance WHERE date = ?
                )
                ORDER BY t.name
                LIMIT ? OFFSET ?
            """
            params = [selected_course, selected_date, page_size, offset]

        # تنفيذ الاستعلام
        cursor.execute(query, params)
        unregistered_students = cursor.fetchall()

        # إضافة المتدربين إلى القائمة
        for student in unregistered_students:
            students_tree.insert("", tk.END, values=student)

    # تحميل البيانات عند فتح النافذة
    load_students()

def show_top_absence_statistics(self):
    """عرض المتدربين الأكثر غياباً وتأخراً وغياباً بعذر"""
    stats_window = tk.Toplevel(self.root)
    stats_window.title("إحصائيات أعلى معدلات الغياب والتأخير")
    stats_window.geometry("900x650")
    stats_window.configure(bg=self.colors["light"])
    stats_window.transient(self.root)
    stats_window.grab_set()

    # توسيط النافذة
    x = (stats_window.winfo_screenwidth() - 900) // 2
    y = (stats_window.winfo_screenheight() - 650) // 2
    stats_window.geometry(f"900x650+{x}+{y}")

    # إطار العنوان
    header_frame = tk.Frame(stats_window, bg=self.colors["primary"], padx=20, pady=15)
    header_frame.pack(fill=tk.X)

    header_label = tk.Label(
        header_frame,
        text="إحصائيات أعلى معدلات الغياب والتأخير",
        font=("Tajawal", 18, "bold"),
        bg=self.colors["primary"],
        fg="white"
    )
    header_label.pack()

    # إطار التحكم
    control_frame = tk.Frame(stats_window, bg=self.colors["light"], padx=20, pady=10)
    control_frame.pack(fill=tk.X)

    tk.Label(
        control_frame,
        text="عدد المتدربين المراد عرضهم:",
        font=self.fonts["text_bold"],
        bg=self.colors["light"]
    ).pack(side=tk.RIGHT, padx=5)

    limit_var = tk.StringVar(value="10")
    limit_combobox = ttk.Combobox(
        control_frame,
        textvariable=limit_var,
        values=["5", "10", "15", "20", "25", "50"],
        state="readonly",
        width=5,
        font=self.fonts["text"]
    )
    limit_combobox.pack(side=tk.RIGHT, padx=5)

    tk.Label(
        control_frame,
        text="تصفية حسب الدورة:",
        font=self.fonts["text_bold"],
        bg=self.colors["light"]
    ).pack(side=tk.RIGHT, padx=5)

    # الحصول على قائمة الدورات
    cursor = self.conn.cursor()
    cursor.execute("SELECT DISTINCT course FROM trainees WHERE course IS NOT NULL AND course != '' ORDER BY course")
    courses = ["جميع الدورات"] + [row[0] for row in cursor.fetchall()]

    course_var = tk.StringVar(value="جميع الدورات")
    course_combobox = ttk.Combobox(
        control_frame,
        textvariable=course_var,
        values=courses,
        state="readonly",
        width=20,
        font=self.fonts["text"]
    )
    course_combobox.pack(side=tk.RIGHT, padx=5)

    refresh_button = tk.Button(
        control_frame,
        text="تحديث البيانات",
        font=self.fonts["text_bold"],
        bg=self.colors["success"],
        fg="white",
        padx=10, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=lambda: load_statistics()
    )
    refresh_button.pack(side=tk.LEFT, padx=5)

    export_button = tk.Button(
        control_frame,
        text="تصدير البيانات",
        font=self.fonts["text_bold"],
        bg=self.colors["secondary"],
        fg="white",
        padx=10, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=lambda: export_statistics()
    )
    export_button.pack(side=tk.LEFT, padx=5)

    # إطار التبويب الرئيسي
    tab_control = ttk.Notebook(stats_window)
    tab_control.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

    # إنشاء التبويبات الثلاثة
    tab_absence = tk.Frame(tab_control, bg=self.colors["light"])
    tab_lateness = tk.Frame(tab_control, bg=self.colors["light"])
    tab_excused = tk.Frame(tab_control, bg=self.colors["light"])

    tab_control.add(tab_absence, text="أعلى معدلات الغياب")
    tab_control.add(tab_lateness, text="أعلى معدلات التأخير")
    tab_control.add(tab_excused, text="أعلى معدلات الغياب بعذر")

    # إنشاء جداول العرض
    absence_tree = self.create_stats_tree(tab_absence)
    lateness_tree = self.create_stats_tree(tab_lateness)
    excused_tree = self.create_stats_tree(tab_excused)

    # دالة تحميل البيانات
    def load_statistics():
        limit = int(limit_var.get())
        course_filter = course_var.get()

        # مسح البيانات الحالية
        for tree in [absence_tree, lateness_tree, excused_tree]:
            for item in tree.get_children():
                tree.delete(item)

        # إعداد شرط الدورة
        course_condition = ""
        course_params = []

        if course_filter != "جميع الدورات":
            course_condition = "AND t.course = ?"
            course_params = [course_filter]

        # استعلام الغياب
        query_absence = f"""
        SELECT t.national_id, t.name, t.rank, t.course, COUNT(*) as count
        FROM attendance a
        JOIN trainees t ON a.national_id = t.national_id
        WHERE a.status = 'غائب' AND t.is_excluded = 0 {course_condition}
        GROUP BY t.national_id
        ORDER BY count DESC
        LIMIT ?
        """

        # استعلام التأخير
        query_lateness = f"""
        SELECT t.national_id, t.name, t.rank, t.course, COUNT(*) as count
        FROM attendance a
        JOIN trainees t ON a.national_id = t.national_id
        WHERE a.status = 'متأخر' AND t.is_excluded = 0 {course_condition}
        GROUP BY t.national_id
        ORDER BY count DESC
        LIMIT ?
        """

        # استعلام الغياب بعذر
        query_excused = f"""
        SELECT t.national_id, t.name, t.rank, t.course, COUNT(*) as count
        FROM attendance a
        JOIN trainees t ON a.national_id = t.national_id
        WHERE a.status = 'غائب بعذر' AND t.is_excluded = 0 {course_condition}
        GROUP BY t.national_id
        ORDER BY count DESC
        LIMIT ?
        """

        # تنفيذ الاستعلامات وعرض البيانات
        cursor = self.conn.cursor()

        # الغياب
        cursor.execute(query_absence, course_params + [limit])
        result_absence = cursor.fetchall()
        for i, row in enumerate(result_absence):
            national_id, name, rank, course, count = row
            absence_tree.insert("", tk.END, values=(i + 1, national_id, name, rank, course, count,
                                                    f"{(count / self.get_total_days(national_id) * 100):.1f}%"))

        # التأخير
        cursor.execute(query_lateness, course_params + [limit])
        result_lateness = cursor.fetchall()
        for i, row in enumerate(result_lateness):
            national_id, name, rank, course, count = row
            lateness_tree.insert("", tk.END, values=(i + 1, national_id, name, rank, course, count,
                                                     f"{(count / self.get_total_days(national_id) * 100):.1f}%"))

        # الغياب بعذر
        cursor.execute(query_excused, course_params + [limit])
        result_excused = cursor.fetchall()
        for i, row in enumerate(result_excused):
            national_id, name, rank, course, count = row
            excused_tree.insert("", tk.END, values=(i + 1, national_id, name, rank, course, count,
                                                    f"{(count / self.get_total_days(national_id) * 100):.1f}%"))

    # دالة تصدير البيانات
    def export_statistics():
        if not self.current_user["permissions"]["can_export_data"]:
            messagebox.showwarning("تنبيه", "ليس لديك صلاحية تصدير البيانات")
            return

        limit = int(limit_var.get())
        course_filter = course_var.get()

        # اختيار مسار الملف
        export_file = filedialog.asksaveasfilename(
            defaultextension=".xlsx",
            filetypes=[("Excel files", "*.xlsx")],
            initialfile=f"إحصائيات_الغياب_والتأخير.xlsx"
        )

        if not export_file:
            return

        try:
            import pandas as pd
            from pandas import ExcelWriter

            # إعداد شرط الدورة للاستعلامات
            course_condition = ""
            course_params = []

            if course_filter != "جميع الدورات":
                course_condition = "AND t.course = ?"
                course_params = [course_filter]

            # استعلامات الحصول على البيانات
            query_absence = f"""
            SELECT t.national_id, t.name, t.rank, t.course, COUNT(*) as count
            FROM attendance a
            JOIN trainees t ON a.national_id = t.national_id
            WHERE a.status = 'غائب' AND t.is_excluded = 0 {course_condition}
            GROUP BY t.national_id
            ORDER BY count DESC
            LIMIT ?
            """

            query_lateness = f"""
            SELECT t.national_id, t.name, t.rank, t.course, COUNT(*) as count
            FROM attendance a
            JOIN trainees t ON a.national_id = t.national_id
            WHERE a.status = 'متأخر' AND t.is_excluded = 0 {course_condition}
            GROUP BY t.national_id
            ORDER BY count DESC
            LIMIT ?
            """

            query_excused = f"""
            SELECT t.national_id, t.name, t.rank, t.course, COUNT(*) as count
            FROM attendance a
            JOIN trainees t ON a.national_id = t.national_id
            WHERE a.status = 'غائب بعذر' AND t.is_excluded = 0 {course_condition}
            GROUP BY t.national_id
            ORDER BY count DESC
            LIMIT ?
            """

            cursor = self.conn.cursor()

            # استخراج البيانات من قاعدة البيانات
            cursor.execute(query_absence, course_params + [limit])
            absence_data = cursor.fetchall()

            cursor.execute(query_lateness, course_params + [limit])
            lateness_data = cursor.fetchall()

            cursor.execute(query_excused, course_params + [limit])
            excused_data = cursor.fetchall()

            # تحويل البيانات إلى DataFrame
            columns = ["رقم الهوية", "الاسم", "الرتبة", "الدورة", "عدد أيام الغياب", "النسبة المئوية"]

            # دالة مساعدة لإضافة النسبة المئوية
            def add_percentage(data_list):
                result = []
                for row in data_list:
                    national_id, name, rank, course, count = row
                    total_days = self.get_total_days(national_id)
                    percentage = f"{(count / total_days * 100):.1f}%" if total_days > 0 else "0%"
                    result.append([national_id, name, rank, course, count, percentage])
                return result

            df_absence = pd.DataFrame(add_percentage(absence_data), columns=columns)
            df_lateness = pd.DataFrame(add_percentage(lateness_data), columns=columns)
            df_excused = pd.DataFrame(add_percentage(excused_data), columns=columns)

            # تصدير البيانات إلى Excel
            with ExcelWriter(export_file) as writer:
                df_absence.to_excel(writer, sheet_name="أعلى معدلات الغياب", index=False)
                df_lateness.to_excel(writer, sheet_name="أعلى معدلات التأخير", index=False)
                df_excused.to_excel(writer, sheet_name="أعلى معدلات الغياب بعذر", index=False)

            messagebox.showinfo("نجاح", f"تم تصدير البيانات بنجاح إلى:\n{export_file}")

        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء تصدير البيانات: {str(e)}")

    # زر الإغلاق
    close_button = tk.Button(
        stats_window,
        text="إغلاق",
        font=self.fonts["text_bold"],
        bg=self.colors["dark"],
        fg="white",
        padx=20, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=stats_window.destroy
    )
    close_button.pack(pady=10)

    # تحميل البيانات مبدئياً
    load_statistics()

def create_stats_tree(self, parent_frame):
    """إنشاء جدول عرض إحصائيات"""
    # إنشاء إطار للجدول مع شريط تمرير
    tree_frame = tk.Frame(parent_frame, bg=self.colors["light"])
    tree_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

    scrollbar = tk.Scrollbar(tree_frame)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    tree = ttk.Treeview(
        tree_frame,
        columns=("rank", "id", "name", "grade", "course", "count", "percentage"),
        show="headings",
        yscrollcommand=scrollbar.set,
        style="Bold.Treeview"
    )

    # تعريف الأعمدة
    tree.column("rank", width=50, anchor=tk.CENTER)
    tree.column("id", width=120, anchor=tk.CENTER)
    tree.column("name", width=180, anchor=tk.CENTER)
    tree.column("grade", width=100, anchor=tk.CENTER)
    tree.column("course", width=150, anchor=tk.CENTER)
    tree.column("count", width=80, anchor=tk.CENTER)
    tree.column("percentage", width=100, anchor=tk.CENTER)

    # عناوين الأعمدة
    tree.heading("rank", text="الترتيب")
    tree.heading("id", text="رقم الهوية")
    tree.heading("name", text="الاسم")
    tree.heading("grade", text="الرتبة")
    tree.heading("course", text="الدورة")
    tree.heading("count", text="عدد المرات")
    tree.heading("percentage", text="النسبة")

    tree.pack(fill=tk.BOTH, expand=True)
    scrollbar.config(command=tree.yview)

    return tree

def get_total_days(self, national_id):
    """حساب إجمالي عدد أيام الدورة للمتدرب"""
    cursor = self.conn.cursor()
    cursor.execute("""
        SELECT COUNT(DISTINCT date) 
        FROM attendance 
        WHERE national_id=?
    """, (national_id,))
    total = cursor.fetchone()[0]
    return total if total > 0 else 1  # لتجنب القسمة على صفر

def export_based_on_filter(self):
    if not self.current_user["permissions"]["can_export_data"]:
        messagebox.showwarning("تنبيه", "ليس لديك صلاحية تصدير البيانات")
        return

    status_value = self.status_filter_var.get()
    if status_value == "الكل":
        self.export_filtered_records(None)
    else:
        self.export_filtered_records(status_value)

def update_attendance_display(self):
    # تحديد حجم الصفحة
    self.page_size = 100  # عدد السجلات في الصفحة الواحدة
    self.current_page = 1 if not hasattr(self, 'current_page') else self.current_page

    # مسح البيانات الحالية
    for row in self.attendance_tree.get_children():
        self.attendance_tree.delete(row)

    date_str = self.log_date_entry.get_date().strftime("%Y-%m-%d")
    search_text = self.log_search_var.get().strip()
    status_filter_val = self.status_filter_var.get()

    # بناء الاستعلام مع تصفية
    query = """
        SELECT a.national_id, a.name, a.rank, a.course, a.status,
               a.updated_by, a.updated_at
        FROM attendance a
        JOIN trainees t ON a.national_id = t.national_id
        WHERE a.date=? AND t.is_excluded=0
    """
    params = [date_str]

    # إضافة شرط التصفية حسب الحالة
    if status_filter_val != "الكل":
        query += " AND a.status=?"
        params.append(status_filter_val)

    # إضافة شرط البحث
    if search_text:
        query += " AND (a.national_id LIKE ? OR a.name LIKE ?)"
        params.extend([f'%{search_text}%', f'%{search_text}%'])

    # الحصول على إجمالي عدد النتائج
    count_query = f"SELECT COUNT(*) FROM ({query}) AS filtered_results"
    cursor = self.conn.cursor()
    cursor.execute(count_query, params)
    total_records = cursor.fetchone()[0]

    # تحديد عدد الصفحات
    total_pages = max(1, (total_records + self.page_size - 1) // self.page_size)

    # إضافة حدود الصفحة الحالية
    limit_offset = f" LIMIT {self.page_size} OFFSET {(self.current_page - 1) * self.page_size}"
    query += limit_offset

    # تنفيذ الاستعلام
    cursor.execute(query, params)
    results = cursor.fetchall()

    # إظهار النتائج والمعلومات الإضافية
    for row in results:
        national_id = row[0]

        # الحصول على إحصائيات المتدرب
        all_absences = self.get_all_absences_count(national_id)
        all_lates = self.get_all_late_count(national_id)
        all_excused = self.get_all_excused_count(national_id)

        # إضافة قيمة checkbox فارغة كأول عنصر
        checkbox_value = ""
        values = [checkbox_value] + list(row[0:5]) + [all_absences, all_lates, all_excused]

        # إضافة معلومات التعديل إذا كان المستخدم مصرح له
        if self.current_user["permissions"]["can_view_edit_history"]:
            values.extend([row[5] if row[5] else "", row[6] if row[6] else ""])

        item_id = self.attendance_tree.insert("", tk.END, values=values)

        # تطبيق لون الخلفية حسب الحالة
        status = row[4]
        self.apply_status_color(item_id, status)

    # إضافة أزرار التنقل بين الصفحات
    self.create_pagination_controls(total_pages)

def create_pagination_controls(self, total_pages):
    """إنشاء أزرار التنقل بين الصفحات"""
    # إزالة أزرار التنقل الحالية إن وجدت
    if hasattr(self, 'pagination_frame'):
        self.pagination_frame.destroy()

    # لا داعي لعرض أزرار التنقل إذا كانت هناك صفحة واحدة فقط
    if total_pages <= 1:
        return

    # إنشاء إطار لأزرار التنقل
    self.pagination_frame = tk.Frame(self.attendance_log_tab, bg=self.colors["light"])
    self.pagination_frame.pack(fill=tk.X, padx=10, pady=5)

    # إضافة زر الصفحة السابقة
    prev_btn = tk.Button(
        self.pagination_frame,
        text="السابق",
        font=self.fonts["text_bold"],
        bg=self.colors["secondary"],
        fg="white",
        padx=10, pady=2,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=lambda: self.change_page(-1, total_pages)
    )
    prev_btn.pack(side=tk.RIGHT, padx=5)

    # إضافة لابل لعرض رقم الصفحة الحالية
    self.page_label = tk.Label(
        self.pagination_frame,
        text=f"الصفحة {self.current_page} من {total_pages}",
        font=self.fonts["text_bold"],
        bg=self.colors["light"]
    )
    self.page_label.pack(side=tk.RIGHT, padx=10)

    # إضافة زر الصفحة التالية
    next_btn = tk.Button(
        self.pagination_frame,
        text="التالي",
        font=self.fonts["text_bold"],
        bg=self.colors["secondary"],
        fg="white",
        padx=10, pady=2,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=lambda: self.change_page(1, total_pages)
    )
    next_btn.pack(side=tk.RIGHT, padx=5)

def change_page(self, delta, total_pages):
    """تغيير الصفحة الحالية والتحديث"""
    new_page = self.current_page + delta

    # التأكد من أن الصفحة الجديدة ضمن النطاق المسموح
    if 1 <= new_page <= total_pages:
        self.current_page = new_page
        self.update_attendance_display()

def apply_status_color(self, item_id, status):
    """تطبيق لون مناسب حسب حالة الحضور"""
    if status == "حاضر":
        self.attendance_tree.item(item_id, tags=("present",))
    elif status == "متأخر":
        self.attendance_tree.item(item_id, tags=("late",))
    elif status == "غائب بعذر":
        self.attendance_tree.item(item_id, tags=("excused",))
    elif status == "لم يباشر":
        self.attendance_tree.item(item_id, tags=("not_started",))
    elif status == "تطبيق ميداني":
        self.attendance_tree.item(item_id, tags=("field_application",))
    elif status == "يوم طالب":
        self.attendance_tree.item(item_id, tags=("student_day",))
    elif status == "مسائية / عن بعد":
        self.attendance_tree.item(item_id, tags=("evening_remote",))
    elif status == "حالة وفاة":
        self.attendance_tree.item(item_id, tags=("death_case",))
    elif status == "منوم":
        self.attendance_tree.item(item_id, tags=("hospital",))

def reset_attendance_day(self):
    """إعادة تعيين سجلات حضور اليوم المحدد فقط"""
    if not self.current_user["permissions"]["can_reset_attendance"]:
        messagebox.showwarning("تنبيه", "ليس لديك صلاحية إعادة تعيين سجلات الحضور")
        return

    date_str = self.log_date_entry.get_date().strftime("%Y-%m-%d")

    # تأكيد العملية
    if messagebox.askyesno("تأكيد", f"سيتم حذف كل سجلات الحضور بتاريخ {date_str}، هل أنت متأكد؟"):
        try:
            with self.conn:
                self.conn.execute("DELETE FROM attendance WHERE date=?", (date_str,))
            messagebox.showinfo("نجاح", f"تم حذف السجلات بتاريخ {date_str}")
            self.update_attendance_display()
            self.update_statistics()
        except Exception as e:
            messagebox.showerror("خطأ", str(e))

def export_filtered_records(self, status_value):
    if not self.current_user["permissions"]["can_export_data"]:
        messagebox.showwarning("تنبيه", "ليس لديك صلاحية تصدير البيانات")
        return

    date_str = self.log_date_entry.get_date().strftime("%Y-%m-%d")
    query = """
        SELECT
            a.national_id as 'رقم الهوية',
            a.name as 'الاسم',
            a.rank as 'الرتبة',
            a.course as 'اسم الدورة',
            a.time as 'وقت التسجيل',
            a.date as 'التاريخ',
            a.status as 'الحالة',
            a.registered_by as 'سجّل بواسطة',
            a.excuse_reason as 'السبب'
    """

    if self.current_user["permissions"]["can_view_edit_history"]:
        query += """,
            a.updated_by as 'آخر من عدّل',
            a.updated_at as 'وقت آخر تعديل'
        """

    query += """
        FROM attendance a
        JOIN trainees t ON a.national_id = t.national_id
        WHERE a.date=? AND t.is_excluded=0
    """

    params = [date_str]
    if status_value is not None:
        query += " AND a.status=?"
        params.append(status_value)

    df = pd.read_sql(query, self.conn, params=params)
    if df.empty:
        stxt = "الكل" if (status_value is None) else status_value
        messagebox.showinfo("ملاحظة", f"لا توجد بيانات {stxt} في هذا اليوم.")
        return

    stxt = "الكل" if (status_value is None) else status_value
    export_file = filedialog.asksaveasfilename(
        defaultextension=".xlsx",
        filetypes=[("Excel files", "*.xlsx")],
        initialfile=f"{stxt}_{date_str}.xlsx"
    )
    if not export_file:
        return

    try:
        df.to_excel(export_file, index=False)
        messagebox.showinfo("نجاح", f"تم تصدير {stxt} إلى الملف: {export_file}")
    except Exception as e:
        messagebox.showerror("خطأ", str(e))

def on_attendance_double_click(self, event=None):
    if not self.current_user["permissions"]["can_edit_attendance"]:
        messagebox.showwarning("تنبيه", "ليس لديك صلاحية تعديل سجلات الحضور")
        return

    item = self.attendance_tree.selection()
    if not item:
        return
    values = self.attendance_tree.item(item, "values")
    if not values:
        return

    # تعديل هنا: الهوية الآن في العمود الثاني (index 1) بدلاً من الأول
    national_id = values[1]
    date_str = self.log_date_entry.get_date().strftime("%Y-%m-%d")
    attendance_id = self.get_attendance_record_id(national_id, date_str)
    if not attendance_id:
        messagebox.showinfo("خطأ", "لا يمكن العثور على سجل الحضور المحدد.")
        return
    self.open_edit_attendance_window(attendance_id, values)

def get_attendance_record_id(self, national_id, date_str):
    cursor = self.conn.cursor()
    cursor.execute("SELECT id FROM attendance WHERE national_id=? AND date=?", (national_id, date_str))
    result = cursor.fetchone()
    return result[0] if result else None

def open_edit_attendance_window(self, attendance_id, row_values):
    if not self.current_user["permissions"]["can_edit_attendance"]:
        messagebox.showwarning("تنبيه", "ليس لديك صلاحية تعديل سجلات الحضور")
        return

    # الحصول على الحالة الأصلية للمتدرب
    cursor = self.conn.cursor()
    cursor.execute("SELECT original_status FROM attendance WHERE id=?", (attendance_id,))
    original_status = cursor.fetchone()[0]

    edit_window = tk.Toplevel(self.root)
    edit_window.title("تعديل حالة الحضور")
    edit_window.geometry("500x430")  # زيادة الارتفاع لاستيعاب الحقل الجديد
    edit_window.configure(bg=self.colors["light"])
    edit_window.transient(self.root)
    edit_window.grab_set()

    x = (edit_window.winfo_screenwidth() - 500) // 2
    y = (edit_window.winfo_screenheight() - 430) // 2
    edit_window.geometry(f"500x430+{x}+{y}")

    tk.Label(edit_window, text="تعديل حالة الحضور", font=self.fonts["title"], bg=self.colors["primary"],
             fg="white", padx=10, pady=10, width=500).pack(fill=tk.X)

    info_frame = tk.Frame(edit_window, bg=self.colors["light"], padx=20, pady=10)
    info_frame.pack(fill=tk.X)

    # تعديل هنا: الاسم الآن في العمود الثالث (index 2) بدلاً من الثاني
    tk.Label(info_frame, text=f"المتدرب: {row_values[2]}", font=self.fonts["text_bold"],
             bg=self.colors["light"]).pack(anchor=tk.W)

    # تعديل هنا: الحالة الآن في العمود السادس (index 5) بدلاً من الخامس
    tk.Label(info_frame, text=f"الحالة الحالية: {row_values[5]}", font=self.fonts["text"],
             bg=self.colors["light"]).pack(anchor=tk.W)

    tk.Label(info_frame, text=f"الحالة الأصلية: {original_status}", font=self.fonts["text"],
             bg=self.colors["light"]).pack(anchor=tk.W)

    new_status_frame = tk.LabelFrame(edit_window, text="اختر الحالة الجديدة", font=self.fonts["text_bold"],
                                     bg=self.colors["light"], fg=self.colors["dark"], padx=10, pady=10)
    new_status_frame.pack(fill=tk.X, padx=20, pady=10)

    # تعديل: إضافة جميع الحالات المتاحة للاختيار
    status_options = ["حاضر", "متأخر", "غائب", "غائب بعذر", "لم يباشر", "حالة وفاة", "منوم"]
    status_var = tk.StringVar(value=row_values[5])

    status_combobox = ttk.Combobox(new_status_frame, textvariable=status_var, values=status_options,
                                   state="readonly",
                                   font=self.fonts["text"])
    status_combobox.pack(fill=tk.X, padx=5, pady=5)

    # إطار أسباب الغياب
    reason_frame = tk.Frame(edit_window, bg=self.colors["light"], padx=20, pady=5)
    reason_frame.pack(fill=tk.X)

    reason_label = tk.Label(reason_frame, text="سبب الغياب:", font=self.fonts["text"], bg=self.colors["light"])
    reason_entry = tk.Entry(reason_frame, font=self.fonts["text"], width=40)

    # إطار سبب التعديل
    mod_reason_frame = tk.Frame(edit_window, bg=self.colors["light"], padx=20, pady=5)
    mod_reason_frame.pack(fill=tk.X)

    mod_reason_label = tk.Label(mod_reason_frame, text="سبب التعديل:", font=self.fonts["text"],
                                bg=self.colors["light"])
    mod_reason_entry = tk.Entry(mod_reason_frame, font=self.fonts["text"], width=40)

    def on_status_change(*args):
        # إظهار حقل سبب الغياب إذا كانت الحالة "غائب بعذر"
        if status_var.get() == "غائب بعذر":
            reason_label.pack(anchor=tk.W)
            reason_entry.pack(fill=tk.X, pady=5)
        else:
            reason_label.pack_forget()
            reason_entry.pack_forget()

        # إظهار حقل سبب التعديل فقط إذا كانت الحالة الجديدة مختلفة عن الحالة الأصلية
        if status_var.get() != original_status:
            mod_reason_label.pack(anchor=tk.W)
            mod_reason_entry.pack(fill=tk.X, pady=5)
        else:
            mod_reason_label.pack_forget()
            mod_reason_entry.pack_forget()

    status_var.trace("w", on_status_change)
    on_status_change()

    button_frame = tk.Frame(edit_window, bg=self.colors["light"], pady=10)
    button_frame.pack(fill=tk.X, padx=20)

    def save_changes():
        new_status = status_var.get()
        new_reason = reason_entry.get().strip() if new_status == "غائب بعذر" else ""
        modification_reason = mod_reason_entry.get().strip() if new_status != original_status else ""
        now_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        try:
            with self.conn:
                self.conn.execute("""
                    UPDATE attendance
                    SET status=?, excuse_reason=?,
                        updated_by=?, updated_at=?, modification_reason=?
                    WHERE id=?
                """, (
                    new_status,
                    new_reason,
                    self.current_user["full_name"],
                    now_str,
                    modification_reason,
                    attendance_id
                ))
            messagebox.showinfo("نجاح", "تم تحديث حالة الحضور بنجاح")
            edit_window.destroy()
            self.update_attendance_display()
            self.update_statistics()
        except Exception as e:
            messagebox.showerror("خطأ", str(e))

    save_btn = tk.Button(button_frame, text="حفظ التغييرات", font=self.fonts["text_bold"],
                         bg=self.colors["success"],
                         fg="white", padx=15, pady=5, bd=0, relief=tk.FLAT, cursor="hand2", command=save_changes)
    save_btn.pack(side=tk.LEFT, padx=5)

    cancel_btn = tk.Button(button_frame, text="إلغاء", font=self.fonts["text_bold"], bg=self.colors["danger"],
                           fg="white", padx=15, pady=5, bd=0, relief=tk.FLAT, cursor="hand2",
                           command=edit_window.destroy)
    cancel_btn.pack(side=tk.RIGHT, padx=5)

    def delete_record():
        # إضافة: دالة لحذف التسجيل
        if messagebox.askyesno("تأكيد الحذف",
                               f"هل أنت متأكد من حذف تسجيل المتدرب {row_values[1]} ليوم {self.log_date_entry.get_date().strftime('%Y-%m-%d')}؟\n\nلن يظهر هذا اليوم في سجل المتدرب."):
            try:
                with self.conn:
                    self.conn.execute("DELETE FROM attendance WHERE id=?", (attendance_id,))
                messagebox.showinfo("نجاح", "تم حذف تسجيل المتدرب بنجاح")
                edit_window.destroy()
                self.update_attendance_display()
                self.update_statistics()
            except Exception as e:
                messagebox.showerror("خطأ", str(e))

    # إضافة: زر حذف التسجيل
    delete_btn = tk.Button(button_frame, text="حذف التسجيل", font=self.fonts["text_bold"],
                           bg="#FF5722",  # لون برتقالي مميز
                           fg="white", padx=15, pady=5, bd=0, relief=tk.FLAT, cursor="hand2", command=delete_record)
    delete_btn.pack(side=tk.RIGHT, padx=5)


def add_students_to_existing_course(self):
    """إضافة متدربين جدد لدورة موجودة مع خيار لتعيين الفصل مباشرة"""
    if not self.current_user["permissions"]["can_add_students"]:
        messagebox.showwarning("تنبيه", "ليس لديك صلاحية إضافة متدربين جدد")
        return

    # إنشاء نافذة جديدة
    add_window = tk.Toplevel(self.root)
    add_window.title("إضافة متدربين جدد لدورة موجودة")
    add_window.geometry("800x600")
    add_window.configure(bg=self.colors["light"])
    add_window.transient(self.root)
    add_window.grab_set()

    # توسيط النافذة
    x = (add_window.winfo_screenwidth() - 800) // 2
    y = (add_window.winfo_screenheight() - 600) // 2
    add_window.geometry(f"800x600+{x}+{y}")

    # إضافة عنوان للنافذة
    tk.Label(
        add_window,
        text="إضافة متدربين جدد لدورة موجودة",
        font=self.fonts["title"],
        bg=self.colors["primary"],
        fg="white",
        padx=10, pady=10
    ).pack(fill=tk.X)

    # إطار اختيار الدورة والفصل
    course_frame = tk.Frame(add_window, bg=self.colors["light"], padx=20, pady=10)
    course_frame.pack(fill=tk.X)

    tk.Label(course_frame, text="اختر الدورة:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=0,
                                                                                                            column=3,
                                                                                                            padx=5,
                                                                                                            pady=8,
                                                                                                            sticky=tk.E)

    # الحصول على قائمة الدورات المتاحة
    cursor = self.conn.cursor()
    cursor.execute("SELECT DISTINCT course FROM trainees")
    courses = [row[0] for row in cursor.fetchall() if row[0]]

    course_var = tk.StringVar()
    course_combo = ttk.Combobox(
        course_frame,
        textvariable=course_var,
        values=courses,
        font=self.fonts["text"],
        width=30,
        state="readonly"
    )
    course_combo.grid(row=0, column=2, padx=5, pady=8, sticky=tk.W)

    # إضافة عنصر اختيار الفصل
    tk.Label(course_frame, text="اختر الفصل:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=0,
                                                                                                           column=1,
                                                                                                           padx=5,
                                                                                                           pady=8,
                                                                                                           sticky=tk.E)

    section_var = tk.StringVar()
    section_combo = ttk.Combobox(
        course_frame,
        textvariable=section_var,
        font=self.fonts["text"],
        width=20,
        state="readonly"
    )
    section_combo.grid(row=0, column=0, padx=5, pady=8, sticky=tk.W)

    # دالة لتحديث قائمة الفصول عند اختيار دورة
    def update_sections():
        selected_course = course_var.get()
        if not selected_course:
            section_combo['values'] = []
            section_var.set("")
            return

        # الحصول على قائمة الفصول المتاحة للدورة
        cursor = self.conn.cursor()
        cursor.execute("""
            SELECT section_name FROM course_sections
            WHERE course_name=?
            ORDER BY section_name
        """, (selected_course,))
        sections = [row[0] for row in cursor.fetchall()]

        # لا نضيف خيار "بدون فصل" للقائمة المنسدلة
        section_combo['values'] = sections

        if sections:
            section_combo.current(0)  # اختيار أول فصل كافتراضي
        else:
            # إذا لم تكن هناك فصول، اطلب من المستخدم إنشاء فصل أولاً
            messagebox.showwarning("تنبيه",
                                   "لا توجد فصول لهذه الدورة. الرجاء إنشاء فصل أولاً من خلال 'إدارة الفصول وتصدير الكشوفات'.")
            return

    # ربط وظيفة تحديث الفصول بتغيير الدورة
    course_combo.bind("<<ComboboxSelected>>", lambda e: update_sections())

    # إضافة إطار معلومات المتدربين
    info_frame = tk.Frame(add_window, bg=self.colors["light"], padx=20, pady=5)
    info_frame.pack(fill=tk.X)

    tk.Label(
        info_frame,
        text="معلومات المتدربين المضافين:",
        font=self.fonts["subtitle"],
        bg=self.colors["light"],
        fg=self.colors["primary"]
    ).pack(anchor=tk.W, pady=(0, 10))

    # إطار البحث
    search_frame = tk.Frame(add_window, bg=self.colors["light"])
    search_frame.pack(fill=tk.X, pady=5)

    tk.Label(search_frame, text="بحث بالاسم أو الهوية:", font=self.fonts["text_bold"],
             bg=self.colors["light"]).pack(side=tk.RIGHT, padx=5)

    self.name_search_entry = tk.Entry(search_frame, font=self.fonts["text"], width=30, bd=2, relief=tk.GROOVE)
    self.name_search_entry.pack(side=tk.RIGHT, padx=5, fill=tk.X, expand=True)
    self.name_search_entry.bind("<KeyRelease>", self.dynamic_name_search)

    self.name_listbox = tk.Listbox(add_window, font=self.fonts["text"], height=4,
                                   selectbackground=self.colors["primary"], bd=2, relief=tk.GROOVE)
    self.name_listbox.pack(fill=tk.X, padx=10, pady=(0, 10))
    self.name_listbox.bind("<<ListboxSelect>>", self.on_name_select)

    input_frame = tk.Frame(add_window, bg=self.colors["light"])
    input_frame.pack(fill=tk.X, pady=5)

    self.id_entry = tk.Entry(self.root)

    # تعديل: إضافة إطار للأزرار في الأسفل
    buttons_frame = tk.Frame(add_window, bg=self.colors["light"], pady=20)
    buttons_frame.pack(fill=tk.X, padx=20)

    add_one_btn = tk.Button(
        buttons_frame,
        text="إضافة متدرب واحد",
        font=self.fonts["text_bold"],
        bg=self.colors["success"],
        fg="white",
        padx=10, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=lambda: add_single_student(course_var.get(), section_var.get())
    )
    add_one_btn.pack(side=tk.RIGHT, padx=10)

    import_excel_btn = tk.Button(
        buttons_frame,
        text="استيراد من ملف Excel",
        font=self.fonts["text_bold"],
        bg=self.colors["secondary"],
        fg="white",
        padx=10, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=lambda: import_from_excel(course_var.get(), section_var.get())
    )
    import_excel_btn.pack(side=tk.RIGHT, padx=10)

    close_btn = tk.Button(
        buttons_frame,
        text="إغلاق",
        font=self.fonts["text_bold"],
        bg=self.colors["dark"],
        fg="white",
        padx=10, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=add_window.destroy
    )
    close_btn.pack(side=tk.LEFT, padx=10)

    # دالة إضافة متدرب واحد جديد للدورة
    def add_single_student(course_name, section_name):
        if not course_name:
            messagebox.showwarning("تنبيه", "الرجاء اختيار الدورة أولاً")
            return

        # استخدام نافذة إضافة متدرب موجودة مع إعداد اسم الدورة مسبقاً
        single_window = tk.Toplevel(add_window)
        single_window.title("إضافة متدرب جديد للدورة")
        single_window.geometry("400x350")
        single_window.configure(bg=self.colors["light"])
        single_window.transient(add_window)
        single_window.grab_set()

        x = (single_window.winfo_screenwidth() - 400) // 2
        y = (single_window.winfo_screenheight() - 350) // 2
        single_window.geometry(f"400x350+{x}+{y}")

        tk.Label(
            single_window,
            text=f"إضافة متدرب جديد للدورة: {course_name}",
            font=self.fonts["title"],
            bg=self.colors["primary"],
            fg="white",
            padx=10, pady=10, width=400
        ).pack(fill=tk.X)

        form_frame = tk.Frame(single_window, bg=self.colors["light"], padx=20, pady=20)
        form_frame.pack(fill=tk.BOTH)

        tk.Label(form_frame, text="رقم الهوية:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=0,
                                                                                                             column=1,
                                                                                                             padx=5,
                                                                                                             pady=5,
                                                                                                             sticky=tk.E)
        id_entry = tk.Entry(form_frame, font=self.fonts["text"], width=25)
        id_entry.grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)

        tk.Label(form_frame, text="الاسم:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=1,
                                                                                                        column=1,
                                                                                                        padx=5,
                                                                                                        pady=5,
                                                                                                        sticky=tk.E)
        name_entry = tk.Entry(form_frame, font=self.fonts["text"], width=25)
        name_entry.grid(row=1, column=0, padx=5, pady=5, sticky=tk.W)

        tk.Label(form_frame, text="الرتبة:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=2,
                                                                                                         column=1,
                                                                                                         padx=5,
                                                                                                         pady=5,
                                                                                                         sticky=tk.E)
        rank_entry = tk.Entry(form_frame, font=self.fonts["text"], width=25)
        rank_entry.grid(row=2, column=0, padx=5, pady=5, sticky=tk.W)

        tk.Label(form_frame, text="رقم الجوال:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=3,
                                                                                                             column=1,
                                                                                                             padx=5,
                                                                                                             pady=5,
                                                                                                             sticky=tk.E)
        phone_entry = tk.Entry(form_frame, font=self.fonts["text"], width=25)
        phone_entry.grid(row=3, column=0, padx=5, pady=5, sticky=tk.W)

        button_frame = tk.Frame(single_window, bg=self.colors["light"], pady=10)
        button_frame.pack(fill=tk.X)

        def save_student():
            nid = id_entry.get().strip()
            name = name_entry.get().strip()
            rank_ = rank_entry.get().strip()
            phone = phone_entry.get().strip()
            selected_section = section_name  # الفصل المختار

            if not all([nid, name]):
                messagebox.showwarning("تنبيه", "يجب إدخال رقم الهوية والاسم على الأقل")
                return

            if not selected_section:
                messagebox.showwarning("تنبيه", "يجب اختيار فصل للمتدرب")
                return

            cursor = self.conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM trainees WHERE national_id=?", (nid,))
            exists = cursor.fetchone()[0]

            if exists > 0:
                # التحقق مما إذا كان المتدرب موجود في نفس الدورة
                cursor.execute("SELECT course FROM trainees WHERE national_id=?", (nid,))
                current_course = cursor.fetchone()[0]

                if current_course == course_name:
                    messagebox.showwarning("تنبيه", f"رقم الهوية موجود بالفعل في نفس الدورة: {course_name}")
                    return

                if not messagebox.askyesno("تأكيد الإضافة",
                                           f"المتدرب برقم الهوية {nid} موجود في دورة أخرى: {current_course}\n\nهل تريد نقله من الدورة السابقة إلى الدورة الجديدة: {course_name}؟"):
                    return

                try:
                    # حذف المتدرب من الدورة القديمة
                    with self.conn:
                        # حذف سجلات الحضور للمتدرب
                        self.conn.execute("DELETE FROM attendance WHERE national_id=?", (nid,))
                        # حذف توزيع الفصول السابق
                        self.conn.execute("DELETE FROM student_sections WHERE national_id=?", (nid,))
                        # حذف المتدرب نفسه
                        self.conn.execute("DELETE FROM trainees WHERE national_id=?", (nid,))
                except Exception as e:
                    messagebox.showerror("خطأ", f"حدث خطأ أثناء حذف السجل القديم: {str(e)}")
                    return

            current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            try:
                with self.conn:
                    # إضافة المتدرب للدورة
                    self.conn.execute("""
                        INSERT INTO trainees (national_id, name, rank, course, phone)
                        VALUES (?, ?, ?, ?, ?)
                    """, (nid, name, rank_, course_name, phone))

                    # إذا تم اختيار فصل (وليس "بدون فصل")، أضف المتدرب إلى الفصل
                    if section_name and section_name != "بدون فصل":
                        self.conn.execute("""
                            INSERT INTO student_sections 
                            (national_id, course_name, section_name, assigned_date)
                            VALUES (?, ?, ?, ?)
                        """, (nid, course_name, section_name, current_date))

                messagebox.showinfo("نجاح", f"تم إضافة المتدرب {name} بنجاح" +
                                    (
                                        f" إلى فصل {section_name}" if section_name and section_name != "بدون فصل" else ""))
                single_window.destroy()
                self.update_students_tree()

            except Exception as e:
                messagebox.showerror("خطأ", str(e))

        save_btn = tk.Button(button_frame, text="حفظ", font=self.fonts["text_bold"], bg=self.colors["success"],
                             fg="white",
                             padx=15, pady=5, bd=0, relief=tk.FLAT, cursor="hand2", command=save_student)
        save_btn.pack(side=tk.LEFT, padx=10)

        cancel_btn = tk.Button(button_frame, text="إلغاء", font=self.fonts["text_bold"], bg=self.colors["danger"],
                               fg="white",
                               padx=15, pady=5, bd=0, relief=tk.FLAT, cursor="hand2", command=single_window.destroy)
        cancel_btn.pack(side=tk.RIGHT, padx=10)

    def import_from_excel(course_name, section_name):
        """استيراد متدربين من ملف Excel مع إضافتهم إلى الفصل المحدد"""
        if not course_name:
            messagebox.showwarning("تنبيه", "الرجاء اختيار الدورة أولاً")
            return

        # اختيار ملف Excel
        file_path = filedialog.askopenfilename(
            title="اختر ملف Excel يحتوي على بيانات المتدربين",
            filetypes=[("Excel files", "*.xlsx"), ("Excel 97-2003", "*.xls"), ("All files", "*.*")]
        )

        if not file_path:
            return

        # التحقق من وجود مكتبة pandas
        try:
            import pandas as pd
        except ImportError:
            messagebox.showerror("خطأ",
                                 "يجب تثبيت مكتبة pandas لاستيراد ملفات Excel. استخدم الأمر: pip install pandas openpyxl")
            return

        try:
            # قراءة الملف
            df = pd.read_excel(file_path)

            # التحقق من وجود الأعمدة المطلوبة
            required_columns = {"national_id", "name"}
            found_columns = set(df.columns)

            # دعم أسماء الأعمدة بالعربية
            arabic_columns = {
                "رقم الهوية": "national_id",
                "الاسم": "name",
                "الرتبة": "rank",
                "رقم الجوال": "phone"
            }

            # تغيير الأسماء العربية إلى إنجليزية إذا وجدت
            rename_dict = {}
            for arabic, english in arabic_columns.items():
                if arabic in df.columns:
                    rename_dict[arabic] = english

            if rename_dict:
                df = df.rename(columns=rename_dict)
                found_columns = set(df.columns)

            missing_columns = required_columns - found_columns
            if missing_columns:
                messagebox.showerror("خطأ",
                                     f"الأعمدة التالية مفقودة في الملف: {', '.join(missing_columns)}\n\nيجب أن يحتوي الملف على عمود 'national_id' (رقم الهوية) وعمود 'name' (الاسم) على الأقل.")
                return

            # إنشاء نافذة تأكيد المعاينة
            preview_window = tk.Toplevel(add_window)
            preview_window.title("معاينة بيانات المتدربين")
            preview_window.geometry("800x600")
            preview_window.configure(bg=self.colors["light"])
            preview_window.transient(add_window)
            preview_window.grab_set()

            tk.Label(
                preview_window,
                text=f"معاينة المتدربين المراد إضافتهم إلى دورة: {course_name}" +
                     (f" - فصل: {section_name}" if section_name and section_name != "بدون فصل" else ""),
                font=self.fonts["title"],
                bg=self.colors["primary"],
                fg="white",
                padx=10, pady=10
            ).pack(fill=tk.X)

            # عرض إحصائيات حول البيانات
            total_records = len(df)
            tk.Label(
                preview_window,
                text=f"إجمالي المتدربين في الملف: {total_records}",
                font=self.fonts["text_bold"],
                bg=self.colors["light"],
                pady=5
            ).pack()

            # إطار لعرض معاينة البيانات
            preview_frame = tk.Frame(preview_window, bg=self.colors["light"])
            preview_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=5)

            preview_scroll = tk.Scrollbar(preview_frame)
            preview_scroll.pack(side=tk.RIGHT, fill=tk.Y)

            # شجرة للمعاينة
            preview_tree = ttk.Treeview(
                preview_frame,
                columns=["id", "national_id", "name", "rank", "phone", "status"],
                show="headings",
                yscrollcommand=preview_scroll.set,
                style="Bold.Treeview"
            )

            preview_tree.column("id", width=50, anchor=tk.CENTER)
            preview_tree.column("national_id", width=150, anchor=tk.CENTER)
            preview_tree.column("name", width=200, anchor=tk.CENTER)
            preview_tree.column("rank", width=100, anchor=tk.CENTER)
            preview_tree.column("phone", width=120, anchor=tk.CENTER)
            preview_tree.column("status", width=150, anchor=tk.CENTER)

            preview_tree.heading("id", text="#")
            preview_tree.heading("national_id", text="رقم الهوية")
            preview_tree.heading("name", text="الاسم")
            preview_tree.heading("rank", text="الرتبة")
            preview_tree.heading("phone", text="رقم الجوال")
            preview_tree.heading("status", text="الحالة")

            preview_tree.pack(fill=tk.BOTH, expand=True)
            preview_scroll.config(command=preview_tree.yview)

            # إضافة الإمكانية لتمييز المتدربين حسب حالتهم
            preview_tree.tag_configure("new", background="#e8f5e9")  # خلفية خضراء فاتحة للمتدربين الجدد
            preview_tree.tag_configure("existing_same",
                                       background="#ffebee")  # خلفية حمراء فاتحة للمتدربين الموجودين في نفس الدورة
            preview_tree.tag_configure("existing_other",
                                       background="#fff8e1")  # خلفية صفراء فاتحة للمتدربين في دورات أخرى

            # العداد للمتدربين حسب حالتهم
            new_students = 0
            existing_same_course = 0
            existing_other_course = 0

            # تحضير بيانات المتدربين للعرض
            student_rows = []

            for i, row in df.iterrows():
                national_id = str(row["national_id"]).strip()
                name = str(row["name"]).strip()

                # إذا كان الصف يحتوي على بيانات فارغة أو غير صالحة، تخطيه
                if not national_id or not name:
                    continue

                rank = str(row.get("rank", "")).strip() if "rank" in row else ""
                phone = str(row.get("phone", "")).strip() if "phone" in row else ""

                # التحقق من وجود المتدرب في قاعدة البيانات
                cursor.execute("SELECT course FROM trainees WHERE national_id=?", (national_id,))
                existing = cursor.fetchone()

                status = ""
                tag = ""

                if existing:
                    existing_course = existing[0]
                    if existing_course == course_name:
                        status = f"موجود بالفعل في دورة: {existing_course}"
                        tag = "existing_same"
                        existing_same_course += 1
                    else:
                        status = f"موجود في دورة أخرى: {existing_course}"
                        tag = "existing_other"
                        existing_other_course += 1
                else:
                    status = "جديد"
                    tag = "new"
                    new_students += 1

                student_rows.append((i + 1, national_id, name, rank, phone, status, tag))

            # إضافة الصفوف إلى الشجرة
            for row in student_rows:
                item_id = preview_tree.insert("", tk.END, values=row[:-1])
                preview_tree.item(item_id, tags=(row[-1],))

            # إضافة ملخص الإحصائيات
            stats_frame = tk.Frame(preview_window, bg=self.colors["light"], padx=20, pady=10)
            stats_frame.pack(fill=tk.X)

            tk.Label(
                stats_frame,
                text=f"متدربين جدد: {new_students}",
                font=self.fonts["text"],
                bg="#e8f5e9", fg="black",
                padx=10, pady=5
            ).pack(side=tk.RIGHT, padx=5)

            tk.Label(
                stats_frame,
                text=f"متدربين موجودون في نفس الدورة: {existing_same_course}",
                font=self.fonts["text"],
                bg="#ffebee", fg="black",
                padx=10, pady=5
            ).pack(side=tk.RIGHT, padx=5)

            tk.Label(
                stats_frame,
                text=f"متدربين موجودون في دورات أخرى: {existing_other_course}",
                font=self.fonts["text"],
                bg="#fff8e1", fg="black",
                padx=10, pady=5
            ).pack(side=tk.RIGHT, padx=5)

            # أزرار التأكيد أو الإلغاء
            button_frame = tk.Frame(preview_window, bg=self.colors["light"], pady=10)
            button_frame.pack(fill=tk.X, padx=10)

            # متغيرات الخيارات
            import_new_var = tk.IntVar(value=1)
            import_other_courses_var = tk.IntVar(value=0)
            import_same_course_var = tk.IntVar(value=0)

            # مربعات الاختيار
            tk.Checkbutton(
                button_frame,
                text="إضافة المتدربين الجدد",
                variable=import_new_var,
                font=self.fonts["text"],
                bg=self.colors["light"]
            ).pack(anchor=tk.W)

            tk.Checkbutton(
                button_frame,
                text="إضافة المتدربين الموجودين في دورات أخرى (سيتم نقلهم)",
                variable=import_other_courses_var,
                font=self.fonts["text"],
                bg=self.colors["light"]
            ).pack(anchor=tk.W)

            tk.Checkbutton(
                button_frame,
                text="تحديث بيانات المتدربين الموجودين في نفس الدورة",
                variable=import_same_course_var,
                font=self.fonts["text"],
                bg=self.colors["light"]
            ).pack(anchor=tk.W)

            # إطار زر التنفيذ
            btn_frame = tk.Frame(preview_window, bg=self.colors["light"], pady=10)
            btn_frame.pack(fill=tk.X, padx=10)

            def execute_import():
                # التحقق من تحديد خيار واحد على الأقل
                if import_new_var.get() == 0 and import_other_courses_var.get() == 0 and import_same_course_var.get() == 0:
                    messagebox.showwarning("تنبيه", "الرجاء تحديد خيار واحد على الأقل للاستيراد")
                    return

                # إنشاء نافذة تقدم العملية
                progress_window = tk.Toplevel(preview_window)
                progress_window.title("استيراد المتدربين")
                progress_window.geometry("400x150")
                progress_window.configure(bg=self.colors["light"])
                progress_window.transient(preview_window)
                progress_window.grab_set()

                tk.Label(
                    progress_window,
                    text="جاري استيراد المتدربين...",
                    font=self.fonts["text_bold"],
                    bg=self.colors["light"],
                    pady=10
                ).pack()

                progress_var = tk.DoubleVar()
                progress_bar = ttk.Progressbar(
                    progress_window,
                    variable=progress_var,
                    maximum=100,
                    length=350
                )
                progress_bar.pack(pady=10)

                status_label = tk.Label(
                    progress_window,
                    text="جاري التحضير...",
                    font=self.fonts["text"],
                    bg=self.colors["light"]
                )
                status_label.pack(pady=5)

                progress_window.update()

                # حساب عدد العمليات المراد تنفيذها
                operations_count = 0
                if import_new_var.get() == 1:
                    operations_count += new_students
                if import_other_courses_var.get() == 1:
                    operations_count += existing_other_course
                if import_same_course_var.get() == 1:
                    operations_count += existing_same_course

                current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                operations_done = 0
                imported_new = 0
                imported_from_other = 0
                updated_same = 0
                errors = 0

                try:
                    with self.conn:
                        # معالجة المتدربين حسب نوعهم
                        for row_data in student_rows:
                            _, national_id, name, rank, phone, _, tag = row_data

                            # تحديث شريط التقدم
                            progress_var.set((operations_done / max(1, operations_count)) * 100)
                            status_label.config(text=f"معالجة المتدرب: {name}")
                            progress_window.update()

                            # متدربين جدد
                            if tag == "new" and import_new_var.get() == 1:
                                try:
                                    # إضافة المتدرب للدورة
                                    self.conn.execute("""
                                        INSERT INTO trainees (national_id, name, rank, course, phone)
                                        VALUES (?, ?, ?, ?, ?)
                                    """, (national_id, name, rank, course_name, phone))

                                    # إذا تم اختيار فصل (غير "بدون فصل")، أضف المتدرب للفصل
                                    if section_name and section_name != "بدون فصل":
                                        self.conn.execute("""
                                            INSERT INTO student_sections 
                                            (national_id, course_name, section_name, assigned_date)
                                            VALUES (?, ?, ?, ?)
                                        """, (national_id, course_name, section_name, current_date))

                                    imported_new += 1
                                except Exception as e:
                                    print(f"خطأ في إضافة متدرب جديد: {str(e)}")
                                    errors += 1

                            # متدربين من دورات أخرى
                            elif tag == "existing_other" and import_other_courses_var.get() == 1:
                                try:
                                    # حذف سجلات الحضور للمتدرب
                                    self.conn.execute("DELETE FROM attendance WHERE national_id=?", (national_id,))
                                    # حذف توزيع الفصول السابق
                                    self.conn.execute("DELETE FROM student_sections WHERE national_id=?",
                                                      (national_id,))
                                    # تحديث معلومات المتدرب مع الدورة الجديدة
                                    self.conn.execute("""
                                        UPDATE trainees
                                        SET name=?, rank=?, course=?, phone=?
                                        WHERE national_id=?
                                    """, (name, rank, course_name, phone, national_id))

                                    # إذا تم اختيار فصل (غير "بدون فصل")، أضف المتدرب للفصل
                                    if section_name and section_name != "بدون فصل":
                                        self.conn.execute("""
                                            INSERT INTO student_sections 
                                            (national_id, course_name, section_name, assigned_date)
                                            VALUES (?, ?, ?, ?)
                                        """, (national_id, course_name, section_name, current_date))

                                    imported_from_other += 1
                                except Exception as e:
                                    print(f"خطأ في نقل متدرب من دورة أخرى: {str(e)}")
                                    errors += 1

                            # متدربين في نفس الدورة
                            elif tag == "existing_same" and import_same_course_var.get() == 1:
                                try:
                                    # تحديث معلومات المتدرب
                                    self.conn.execute("""
                                        UPDATE trainees
                                        SET name=?, rank=?, phone=?
                                        WHERE national_id=?
                                    """, (name, rank, phone, national_id))

                                    # التحقق مما إذا كان المتدرب موجود في فصل حاليًا
                                    cursor.execute("""
                                        SELECT section_name FROM student_sections
                                        WHERE national_id=? AND course_name=?
                                    """, (national_id, course_name))
                                    current_section = cursor.fetchone()

                                    # إذا اختار المستخدم فصلًا غير "بدون فصل"
                                    if section_name and section_name != "بدون فصل":
                                        if current_section:
                                            # إذا كان المتدرب في فصل مختلف، حدّث الفصل
                                            if current_section[0] != section_name:
                                                self.conn.execute("""
                                                    UPDATE student_sections
                                                    SET section_name=?, assigned_date=?
                                                    WHERE national_id=? AND course_name=?
                                                """, (section_name, current_date, national_id, course_name))
                                        else:
                                            # إذا لم يكن المتدرب في أي فصل، أضفه إلى الفصل المحدد
                                            self.conn.execute("""
                                                INSERT INTO student_sections 
                                                (national_id, course_name, section_name, assigned_date)
                                                VALUES (?, ?, ?, ?)
                                            """, (national_id, course_name, section_name, current_date))
                                    # إذا اختار المستخدم "بدون فصل" وكان المتدرب في فصل
                                    elif section_name == "بدون فصل" and current_section:
                                        # إزالة المتدرب من الفصل
                                        self.conn.execute("""
                                            DELETE FROM student_sections
                                            WHERE national_id=? AND course_name=?
                                        """, (national_id, course_name))

                                    updated_same += 1
                                except Exception as e:
                                    print(f"خطأ في تحديث متدرب موجود: {str(e)}")
                                    errors += 1

                            operations_done += 1

                    # إظهار ملخص النتائج
                    progress_var.set(100)
                    status_label.config(text="تم استيراد المتدربين بنجاح!")
                    progress_window.update()

                    # إغلاق نافذة التقدم بعد ثانيتين
                    progress_window.after(2000, progress_window.destroy)

                    # عرض ملخص النتائج
                    summary = f"تم إكمال عملية الاستيراد بنجاح:\n\n"
                    if import_new_var.get() == 1:
                        summary += f"• تم إضافة {imported_new} متدرب جديد\n"
                    if import_other_courses_var.get() == 1:
                        summary += f"• تم نقل {imported_from_other} متدرب من دورات أخرى\n"
                    if import_same_course_var.get() == 1:
                        summary += f"• تم تحديث بيانات {updated_same} متدرب موجود\n"
                    if errors > 0:
                        summary += f"\nملاحظة: حدث {errors} أخطاء أثناء الاستيراد"

                    if section_name and section_name != "بدون فصل":
                        summary += f"\n\nتم توزيع المتدربين على فصل: {section_name}"

                    messagebox.showinfo("نتائج الاستيراد", summary)

                    # تحديث عرض المتدربين
                    self.update_students_tree()

                    # إغلاق نافذة المعاينة
                    preview_window.destroy()

                except Exception as e:
                    # في حالة حدوث خطأ
                    try:
                        progress_window.destroy()
                    except:
                        pass
                    messagebox.showerror("خطأ", f"حدث خطأ أثناء الاستيراد: {str(e)}")

            confirm_btn = tk.Button(
                btn_frame,
                text="تنفيذ الاستيراد",
                font=self.fonts["text_bold"],
                bg=self.colors["success"],
                fg="white",
                padx=15, pady=5,
                bd=0, relief=tk.FLAT,
                cursor="hand2",
                command=execute_import
            )
            confirm_btn.pack(side=tk.LEFT, padx=5)

            cancel_btn = tk.Button(
                btn_frame,
                text="إلغاء",
                font=self.fonts["text_bold"],
                bg=self.colors["danger"],
                fg="white",
                padx=15, pady=5,
                bd=0, relief=tk.FLAT,
                cursor="hand2",
                command=preview_window.destroy
            )
            cancel_btn.pack(side=tk.RIGHT, padx=5)

        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء قراءة ملف Excel: {str(e)}")

    # تحديث قائمة الفصول عند فتح النافذة
    update_sections()

def close_window(self):
    # إلغاء ربط الحدث قبل إغلاق النافذة
    try:
        self.name_search_entry.unbind("<KeyRelease>")
    except (tk.TclError, AttributeError):
        pass
    # إغلاق النافذة
    self.window.destroy()

def is_widget_valid(self, widget):
    """التحقق من صلاحية عنصر واجهة المستخدم"""
    try:
        widget.winfo_exists()
        return True
    except (tk.TclError, AttributeError):
        return False

def setup_students_tab(self):
    search_frame = tk.LabelFrame(self.students_tab, text="البحث عن متدرب", font=self.fonts["subtitle"],
                                 bg=self.colors["light"], fg=self.colors["dark"], padx=10, pady=10)
    search_frame.pack(fill=tk.X, padx=10, pady=5)

    search_inner_frame = tk.Frame(search_frame, bg=self.colors["light"])
    search_inner_frame.pack(fill=tk.X, padx=5, pady=5)

    # تعديل: تغيير القائمة المنسدلة لعرض جميع المتدربين والمتدربين المستبعدين
    tk.Label(search_inner_frame, text="عرض:", font=self.fonts["text_bold"],
             bg=self.colors["light"]).pack(side=tk.RIGHT, padx=5)

    self.course_type_var = tk.StringVar(value="جميع المتدربين")
    course_type_combo = ttk.Combobox(
        search_inner_frame,
        textvariable=self.course_type_var,
        values=["جميع المتدربين", "المتدربين النشطين", "المتدربين المستبعدين"],  # تغيير الخيارات
        state="readonly",
        width=20,
        font=self.fonts["text"]
    )
    course_type_combo.pack(side=tk.RIGHT, padx=5)
    course_type_combo.bind("<<ComboboxSelected>>", lambda e: self.update_students_tree())

    tk.Label(search_inner_frame, text="بحث (الاسم أو الهوية):", font=self.fonts["text_bold"],
             bg=self.colors["light"]).pack(side=tk.RIGHT, padx=5)
    self.search_entry = tk.Entry(search_inner_frame, font=self.fonts["text"], width=30, bd=2, relief=tk.GROOVE)
    self.search_entry.pack(side=tk.RIGHT, padx=5)
    self.search_entry.bind("<Return>", lambda e: self.search_student())

    search_button = tk.Button(
        search_inner_frame, text="بحث", font=self.fonts["text_bold"], bg=self.colors["primary"], fg="white",
        padx=10, pady=3, bd=0, relief=tk.FLAT, command=self.search_student, cursor="hand2"
    )
    search_button.pack(side=tk.RIGHT, padx=5)

    show_all_button = tk.Button(
        search_inner_frame, text="عرض الكل", font=self.fonts["text_bold"], bg=self.colors["secondary"], fg="white",
        padx=10, pady=3, bd=0, relief=tk.FLAT, command=self.update_students_tree, cursor="hand2"
    )
    show_all_button.pack(side=tk.LEFT, padx=5)

    button_frame = tk.Frame(search_frame, bg=self.colors["light"])
    button_frame.pack(fill=tk.X, padx=5, pady=5)

    add_to_course_btn = tk.Button(
        button_frame,
        text="إضافة متدربين جدد لدورة موجودة",
        font=self.fonts["text_bold"],
        bg="#3949AB",  # لون مميز
        fg="white",
        padx=10, pady=3,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=self.add_students_to_existing_course
    )
    add_to_course_btn.pack(side=tk.LEFT, padx=5)

    if self.current_user["permissions"]["can_add_students"]:
        add_button = tk.Button(
            button_frame, text="إضافة متدرب جديد", font=self.fonts["text_bold"], bg=self.colors["success"],
            fg="white",
            padx=10, pady=3, bd=0, relief=tk.FLAT, command=self.add_new_student, cursor="hand2"
        )
        add_button.pack(side=tk.RIGHT, padx=5)

    if self.current_user["permissions"]["can_edit_students"]:
        edit_button = tk.Button(
            button_frame, text="تعديل المتدرب المحدد", font=self.fonts["text_bold"], bg=self.colors["late"],
            fg="white",
            padx=10, pady=3, bd=0, relief=tk.FLAT, command=lambda: self.edit_student(from_selection=True),
            cursor="hand2"
        )
        edit_button.pack(side=tk.RIGHT, padx=5)

    if self.current_user["permissions"]["can_delete_students"]:
        delete_button = tk.Button(
            button_frame, text="حذف المتدرب المحدد", font=self.fonts["text_bold"], bg=self.colors["danger"],
            fg="white",
            padx=10, pady=3, bd=0, relief=tk.FLAT, command=self.delete_selected_student, cursor="hand2"
        )
        delete_button.pack(side=tk.RIGHT, padx=5)

        multi_courses_button = tk.Button(
            button_frame, text="إدارة الفصول وتصدير الكشوفات", font=self.fonts["text_bold"], bg="#4285f4",
            # لون أزرق أكثر بروزًا
            fg="white",
            padx=10, pady=3, bd=0, relief=tk.FLAT, cursor="hand2", command=self.manage_multi_section_courses
        )
        multi_courses_button.pack(side=tk.LEFT, padx=5)

    if self.current_user["permissions"]["can_import_data"]:
        import_course_button = tk.Button(
            button_frame, text="استيراد دورة جديدة", font=self.fonts["text_bold"], bg=self.colors["secondary"],
            fg="white",
            padx=10, pady=3, bd=0, relief=tk.FLAT, command=self.import_new_course, cursor="hand2"
        )
        import_course_button.pack(side=tk.LEFT, padx=5)

    view_profile_button = tk.Button(
        button_frame, text="عرض ملف المتدرب", font=self.fonts["text_bold"], bg=self.colors["secondary"], fg="white",
        padx=10, pady=3, bd=0, relief=tk.FLAT, command=self.view_student_profile, cursor="hand2"
    )
    view_profile_button.pack(side=tk.RIGHT, padx=5)

    students_display_frame = tk.LabelFrame(self.students_tab, text="قائمة المتدربين", font=self.fonts["subtitle"],
                                           bg=self.colors["light"], fg=self.colors["dark"], padx=10, pady=10)
    students_display_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

    self.students_tree_scroll = tk.Scrollbar(students_display_frame)
    self.students_tree_scroll.pack(side=tk.RIGHT, fill=tk.Y)

    # إضافة عمود لإظهار حالة الاستبعاد
    self.students_tree = ttk.Treeview(
        students_display_frame,
        columns=("id", "name", "rank", "course", "phone", "status"),
        show="headings",
        yscrollcommand=self.students_tree_scroll.set,
        style="Bold.Treeview"
    )
    self.students_tree.column("id", width=120, anchor=tk.CENTER)
    self.students_tree.column("name", width=150, anchor=tk.CENTER)
    self.students_tree.column("rank", width=80, anchor=tk.CENTER)
    self.students_tree.column("course", width=150, anchor=tk.CENTER)
    self.students_tree.column("phone", width=120, anchor=tk.CENTER)
    self.students_tree.column("status", width=80, anchor=tk.CENTER)

    self.students_tree.heading("id", text="رقم الهوية")
    self.students_tree.heading("name", text="الاسم")
    self.students_tree.heading("rank", text="الرتبة")
    self.students_tree.heading("course", text="اسم الدورة")
    self.students_tree.heading("phone", text="رقم الجوال")
    self.students_tree.heading("status", text="الحالة")

    self.students_tree.pack(fill=tk.BOTH, expand=True)
    self.students_tree_scroll.config(command=self.students_tree.yview)

    # إضافة نمط للمتدربين المستبعدين
    self.students_tree.tag_configure("excluded", background="#f8bbd0")

    self.students_tree.bind("<Double-1>", self.on_student_double_click)

def setup_archive_tab(self):
    """إعداد تبويب أرشيف الدورات"""
    archive_frame = tk.Frame(self.archive_tab, bg=self.colors["light"], padx=10, pady=10)
    archive_frame.pack(fill=tk.BOTH, expand=True)

    # عنوان التبويب
    tk.Label(
        archive_frame,
        text="أرشيف الدورات التدريبية",
        font=self.fonts["title"],
        bg=self.colors["primary"],
        fg="white",
        padx=10, pady=10
    ).pack(fill=tk.X)
    # إطار أزرار الأرشفة
    button_frame = tk.Frame(archive_frame, bg=self.colors["light"], pady=20)
    button_frame.pack(fill=tk.X)

    # قسم تصدير الدورات إلى الأرشيف
    export_labelframe = tk.LabelFrame(
        archive_frame,
        text="تصدير الدورات إلى الأرشيف",
        font=self.fonts["subtitle"],
        bg=self.colors["light"],
        fg=self.colors["dark"],
        padx=15,
        pady=15
    )
    export_labelframe.pack(fill=tk.X, pady=10)

    tk.Label(
        export_labelframe,
        text="اختر الدورة التي تريد تصديرها إلى أرشيف خارجي:",
        font=self.fonts["text_bold"],
        bg=self.colors["light"]
    ).pack(anchor=tk.W, pady=(0, 10))

    # إطار لعرض الدورات المتاحة
    courses_frame = tk.Frame(export_labelframe, bg=self.colors["light"])
    courses_frame.pack(fill=tk.X, pady=5)

    # الحصول على جميع الدورات الحالية
    cursor = self.conn.cursor()
    cursor.execute("SELECT DISTINCT course FROM trainees")
    all_courses = [row[0] for row in cursor.fetchall() if row[0]]

    # إطار القائمة
    list_frame = tk.Frame(export_labelframe, bg=self.colors["light"])
    list_frame.pack(fill=tk.X, pady=5)

    # شريط تمرير للقائمة
    list_scroll = tk.Scrollbar(list_frame)
    list_scroll.pack(side=tk.RIGHT, fill=tk.Y)

    # قائمة الدورات مع إمكانية اختيار متعدد
    self.archive_courses_listbox = tk.Listbox(
        list_frame,
        font=self.fonts["text"],
        selectbackground=self.colors["primary"],
        selectforeground="white",
        selectmode=tk.MULTIPLE,
        height=6,
        yscrollcommand=list_scroll.set
    )
    self.archive_courses_listbox.pack(fill=tk.X)
    list_scroll.config(command=self.archive_courses_listbox.yview)

    # إضافة الدورات إلى القائمة
    for course in all_courses:
        self.archive_courses_listbox.insert(tk.END, course)

    # أزرار التصدير
    buttons_frame = tk.Frame(export_labelframe, bg=self.colors["light"], pady=10)
    buttons_frame.pack(fill=tk.X)

    # دالة تصدير الدورات المحددة
    def export_selected_courses():
        selected_indices = self.archive_courses_listbox.curselection()
        if not selected_indices:
            messagebox.showinfo("تنبيه", "الرجاء اختيار دورة واحدة على الأقل للتصدير")
            return

        selected_courses = [self.archive_courses_listbox.get(idx) for idx in selected_indices]

        # تأكيد التصدير
        confirm_msg = f"هل أنت متأكد من تصدير الدورات التالية إلى الأرشيف؟\n\n"
        for course in selected_courses:
            confirm_msg += f"- {course}\n"

        if not messagebox.askyesno("تأكيد التصدير", confirm_msg):
            return

        # تصدير الدورات المحددة
        success = self.archive_manager.export_courses_to_archive(selected_courses)

        if success:
            # سؤال المستخدم إذا كان يريد حذف الدورات من النظام
            if messagebox.askyesno(
                    "حذف الدورات",
                    "تم تصدير الدورات بنجاح إلى الأرشيف. هل تريد حذف هذه الدورات من النظام الآن؟"
            ):
                self.delete_courses_after_archive(selected_courses)

            # تحديث قائمة الدورات
            self.update_archive_courses_list()

    # أزرار الأرشفة
    export_selected_btn = tk.Button(
        buttons_frame,
        text="تصدير الدورات المحددة",
        font=self.fonts["text_bold"],
        bg=self.colors["primary"],
        fg="white",
        padx=15, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=export_selected_courses
    )
    export_selected_btn.pack(side=tk.LEFT, padx=5)

    refresh_btn = tk.Button(
        buttons_frame,
        text="تحديث القائمة",
        font=self.fonts["text_bold"],
        bg=self.colors["secondary"],
        fg="white",
        padx=15, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=self.update_archive_courses_list
    )
    refresh_btn.pack(side=tk.LEFT, padx=5)

    # قسم استعراض الأرشيف
    view_labelframe = tk.LabelFrame(
        archive_frame,
        text="استعراض الأرشيف",
        font=self.fonts["subtitle"],
        bg=self.colors["light"],
        fg=self.colors["dark"],
        padx=15,
        pady=15
    )
    view_labelframe.pack(fill=tk.X, pady=10)

    tk.Label(
        view_labelframe,
        text="استعراض الدورات المؤرشفة سابقًا (قراءة فقط):",
        font=self.fonts["text_bold"],
        bg=self.colors["light"]
    ).pack(anchor=tk.W, pady=(0, 10))

    view_buttons_frame = tk.Frame(view_labelframe, bg=self.colors["light"])
    view_buttons_frame.pack(fill=tk.X, pady=5)

    open_archive_btn = tk.Button(
        view_buttons_frame,
        text="فتح ملف أرشيف دورات",
        font=self.fonts["text_bold"],
        bg="#FF5722",  # لون برتقالي للتمييز
        fg="white",
        padx=15, pady=8,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=self.archive_manager.open_archive_window
    )
    open_archive_btn.pack(side=tk.RIGHT, padx=5)

    # إضافة زر دمج ملفات الأرشيف
    merge_archives_btn = tk.Button(
        view_buttons_frame,
        text="دمج ملفات أرشيف",
        font=self.fonts["text_bold"],
        bg="#9C27B0",  # لون بنفسجي للتمييز
        fg="white",
        padx=15, pady=8,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=self.archive_manager.merge_archives
    )
    merge_archives_btn.pack(side=tk.RIGHT, padx=5)

def update_archive_courses_list(self):
    """تحديث قائمة الدورات المتاحة للأرشفة"""
    self.archive_courses_listbox.delete(0, tk.END)

    cursor = self.conn.cursor()
    cursor.execute("SELECT DISTINCT course FROM trainees")
    all_courses = [row[0] for row in cursor.fetchall() if row[0]]

    for course in all_courses:
        self.archive_courses_listbox.insert(tk.END, course)

def delete_courses_after_archive(self, course_names):
    """حذف الدورات بعد أرشفتها"""
    if not self.current_user["permissions"]["can_delete_students"]:
        messagebox.showwarning("تنبيه", "ليس لديك صلاحية حذف الدورات")
        return

    if not course_names:
        return

    # إنشاء نافذة تقدم العملية
    progress_window = tk.Toplevel(self.root)
    progress_window.title("حذف الدورات")
    progress_window.geometry("450x180")
    progress_window.configure(bg=self.colors["light"])
    progress_window.transient(self.root)
    progress_window.grab_set()

    # توسيط النافذة
    x = (progress_window.winfo_screenwidth() - 450) // 2
    y = (progress_window.winfo_screenheight() - 180) // 2
    progress_window.geometry(f"450x180+{x}+{y}")

    tk.Label(
        progress_window,
        text=f"جاري حذف {len(course_names)} دورة...",
        font=self.fonts["text_bold"],
        bg=self.colors["light"],
        pady=10
    ).pack()

    progress_var = tk.DoubleVar()
    progress_bar = ttk.Progressbar(
        progress_window,
        variable=progress_var,
        maximum=100,
        length=400
    )
    progress_bar.pack(pady=10)

    status_label = tk.Label(
        progress_window,
        text="جاري تحضير العملية...",
        font=self.fonts["text"],
        bg=self.colors["light"]
    )
    status_label.pack(pady=5)

    progress_window.update()

    try:
        cursor = self.conn.cursor()

        # الحذف لكل دورة
        for i, course_name in enumerate(course_names):
            # تحديث شريط التقدم
            progress_var.set((i / len(course_names)) * 80)
            status_label.config(text=f"جاري حذف دورة: {course_name}")
            progress_window.update()

            # الحصول على أرقام هويات المتدربين في الدورة
            cursor.execute("SELECT national_id FROM trainees WHERE course=?", (course_name,))
            student_ids = [row[0] for row in cursor.fetchall()]

            with self.conn:
                # حذف سجلات الحضور للمتدربين
                for student_id in student_ids:
                    self.conn.execute("DELETE FROM attendance WHERE national_id=?", (student_id,))

                # حذف توزيع المتدربين على الفصول
                self.conn.execute("DELETE FROM student_sections WHERE course_name=?", (course_name,))

                # حذف الفصول
                self.conn.execute("DELETE FROM course_sections WHERE course_name=?", (course_name,))

                # حذف المتدربين
                self.conn.execute("DELETE FROM trainees WHERE course=?", (course_name,))

        progress_var.set(100)
        status_label.config(text="تم حذف الدورات بنجاح!")
        progress_window.update()

        # إغلاق نافذة التقدم بعد ثانيتين
        progress_window.after(2000, progress_window.destroy)

        # تحديث البيانات
        self.update_students_tree()
        self.update_statistics()
        self.update_attendance_display()

        messagebox.showinfo("نجاح", f"تم حذف {len(course_names)} دورة بنجاح")

    except Exception as e:
        messagebox.showerror("خطأ", f"حدث خطأ أثناء حذف الدورات: {str(e)}")
        progress_window.destroy()

def on_student_double_click(self, event):
    selected_item = self.students_tree.selection()
    if not selected_item:
        return
    self.view_student_profile()

def search_student(self):
    """البحث عن متدرب مع اعتبار فلتر نوع القائمة الجديدة"""
    text = self.search_entry.get().strip()
    filter_type = self.course_type_var.get()

    # تعديل: شرط البحث حسب الخيار المحدد
    if filter_type == "المتدربين النشطين":
        where_clause = "WHERE (national_id LIKE ? OR name LIKE ?) AND is_excluded=0"
    elif filter_type == "المتدربين المستبعدين":
        where_clause = "WHERE (national_id LIKE ? OR name LIKE ?) AND is_excluded=1"
    else:  # "جميع المتدربين"
        where_clause = "WHERE (national_id LIKE ? OR name LIKE ?)"

    query = f"""
    SELECT t.*, 
        (SELECT section_name FROM student_sections 
         WHERE national_id = t.national_id AND course_name = t.course) as section_name
    FROM trainees t
    {where_clause}
    """

    df = pd.read_sql(query, self.conn, params=[f"%{text}%", f"%{text}%"])
    self.populate_students_tree(df)

def update_students_tree(self):
    """تحديث شجرة المتدربين مع تصفح محدود"""
    # تحديد حجم الصفحة إذا لم يكن محدد مسبقًا
    if not hasattr(self, 'students_page_size'):
        self.students_page_size = 100

    if not hasattr(self, 'students_current_page'):
        self.students_current_page = 1

    filter_type = self.course_type_var.get()

    # مسح البيانات الحالية
    for item in self.students_tree.get_children():
        self.students_tree.delete(item)

    # بناء استعلام متطور مع التصفح المحدود
    where_condition = ""
    if filter_type == "المتدربين النشطين":
        where_condition = "WHERE t.is_excluded=0"
    elif filter_type == "المتدربين المستبعدين":
        where_condition = "WHERE t.is_excluded=1"

    # استعلام العدد الإجمالي
    count_query = f"""
        SELECT COUNT(*) 
        FROM trainees t 
        {where_condition}
    """

    cursor = self.conn.cursor()
    cursor.execute(count_query)
    total_students = cursor.fetchone()[0]

    # حساب عدد الصفحات
    total_pages = max(1, (total_students + self.students_page_size - 1) // self.students_page_size)

    # الاستعلام الرئيسي مع الانضمام إلى جدول الفصول
    query = f"""
        SELECT 
            t.national_id, 
            t.name, 
            t.rank, 
            t.course, 
            t.phone, 
            t.is_excluded,
            (SELECT section_name FROM student_sections 
             WHERE national_id = t.national_id AND course_name = t.course) as section_name
        FROM trainees t
        {where_condition}
        ORDER BY t.name
        LIMIT {self.students_page_size} OFFSET {(self.students_current_page - 1) * self.students_page_size}
    """

    cursor.execute(query)
    students_data = cursor.fetchall()

    # إضافة البيانات إلى الجدول
    for student in students_data:
        national_id, name, rank, course, phone, is_excluded, section_name = student

        # تحديد حالة المتدرب (عادي أو مستبعد)
        status = "مستبعد" if is_excluded == 1 else "موجود"

        # تحضير عرض اسم الدورة مع الفصل إذا كان متوفراً
        course_display = course
        if section_name:
            course_display = f"{course_display} - فصل: {section_name}"

        values = (national_id, name, rank, course_display, phone, status)
        item_id = self.students_tree.insert("", tk.END, values=values)

        # تمييز المتدربين المستبعدين
        if is_excluded == 1:
            self.students_tree.item(item_id, tags=("excluded",))

    # إضافة أزرار التنقل بين صفحات المتدربين
    self.create_students_pagination_controls(total_pages)

def create_students_pagination_controls(self, total_pages):
    """إنشاء أزرار التنقل بين صفحات المتدربين"""
    # إزالة أزرار التنقل الحالية إن وجدت
    if hasattr(self, 'students_pagination_frame'):
        self.students_pagination_frame.destroy()

    # لا داعي لعرض أزرار التنقل إذا كانت هناك صفحة واحدة فقط
    if total_pages <= 1:
        return

    # إنشاء إطار لأزرار التنقل
    self.students_pagination_frame = tk.Frame(self.students_tab, bg=self.colors["light"])
    self.students_pagination_frame.pack(fill=tk.X, padx=10, pady=5)

    # إضافة زر الصفحة السابقة
    prev_btn = tk.Button(
        self.students_pagination_frame,
        text="السابق",
        font=self.fonts["text_bold"],
        bg=self.colors["secondary"],
        fg="white",
        padx=10, pady=2,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=lambda: self.change_students_page(-1, total_pages)
    )
    prev_btn.pack(side=tk.RIGHT, padx=5)

    # إضافة لابل لعرض رقم الصفحة الحالية
    self.students_page_label = tk.Label(
        self.students_pagination_frame,
        text=f"الصفحة {self.students_current_page} من {total_pages}",
        font=self.fonts["text_bold"],
        bg=self.colors["light"]
    )
    self.students_page_label.pack(side=tk.RIGHT, padx=10)

    # إضافة زر الصفحة التالية
    next_btn = tk.Button(
        self.students_pagination_frame,
        text="التالي",
        font=self.fonts["text_bold"],
        bg=self.colors["secondary"],
        fg="white",
        padx=10, pady=2,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=lambda: self.change_students_page(1, total_pages)
    )
    next_btn.pack(side=tk.RIGHT, padx=5)

def change_students_page(self, delta, total_pages):
    """تغيير صفحة جدول المتدربين الحالية والتحديث"""
    new_page = self.students_current_page + delta

    # التأكد من أن الصفحة الجديدة ضمن النطاق المسموح
    if 1 <= new_page <= total_pages:
        self.students_current_page = new_page
        self.update_students_tree()

def populate_students_tree(self, df):
    """تعبئة شجرة المتدربين مع إضافة معلومات الفصل للمتدربين في الدورات متعددة الفصول"""
    for item in self.students_tree.get_children():
        self.students_tree.delete(item)

    for _, row in df.iterrows():
        # تحديد حالة المتدرب (عادي أو مستبعد)
        status = "مستبعد" if row['is_excluded'] == 1 else "موجود"

        # تحضير عرض اسم الدورة مع الفصل إذا كان متوفراً
        course_display = row['course']
        if pd.notna(row.get('section_name')):
            course_display = f"{course_display} - فصل: {row['section_name']}"

        values = (row['national_id'], row['name'], row['rank'], course_display, row['phone'], status)
        item_id = self.students_tree.insert("", tk.END, values=values)

        # تمييز المتدربين المستبعدين
        if row['is_excluded'] == 1:
            self.students_tree.item(item_id, tags=("excluded",))

def add_new_student(self):
    if not self.current_user["permissions"]["can_add_students"]:
        messagebox.showwarning("تنبيه", "ليس لديك صلاحية إضافة متدربين جدد")
        return

    add_window = tk.Toplevel(self.root)
    add_window.title("إضافة متدرب جديد")
    add_window.geometry("400x350")
    add_window.configure(bg=self.colors["light"])
    add_window.transient(self.root)
    add_window.grab_set()

    x = (add_window.winfo_screenwidth() - 400) // 2
    y = (add_window.winfo_screenheight() - 350) // 2
    add_window.geometry(f"400x350+{x}+{y}")

    tk.Label(
        add_window,
        text="إضافة متدرب جديد",
        font=self.fonts["title"],
        bg=self.colors["primary"],
        fg="white",
        padx=10, pady=10, width=400
    ).pack(fill=tk.X)

    form_frame = tk.Frame(add_window, bg=self.colors["light"], padx=20, pady=20)
    form_frame.pack(fill=tk.BOTH)

    tk.Label(form_frame, text="رقم الهوية:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=0,
                                                                                                         column=1,
                                                                                                         padx=5,
                                                                                                         pady=5,
                                                                                                         sticky=tk.E)
    id_entry = tk.Entry(form_frame, font=self.fonts["text"], width=25)
    id_entry.grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)

    tk.Label(form_frame, text="الاسم:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=1, column=1,
                                                                                                    padx=5, pady=5,
                                                                                                    sticky=tk.E)
    name_entry = tk.Entry(form_frame, font=self.fonts["text"], width=25)
    name_entry.grid(row=1, column=0, padx=5, pady=5, sticky=tk.W)

    tk.Label(form_frame, text="الرتبة:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=2,
                                                                                                     column=1,
                                                                                                     padx=5, pady=5,
                                                                                                     sticky=tk.E)
    rank_entry = tk.Entry(form_frame, font=self.fonts["text"], width=25)
    rank_entry.grid(row=2, column=0, padx=5, pady=5, sticky=tk.W)

    tk.Label(form_frame, text="اسم الدورة:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=3,
                                                                                                         column=1,
                                                                                                         padx=5,
                                                                                                         pady=5,
                                                                                                         sticky=tk.E)

    # عرض قائمة الدورات الحالية
    cursor = self.conn.cursor()
    cursor.execute("SELECT DISTINCT course FROM trainees")
    courses = [row[0] for row in cursor.fetchall() if row[0]]

    if courses:
        course_entry = ttk.Combobox(form_frame, font=self.fonts["text"], width=23, values=courses)
    else:
        course_entry = tk.Entry(form_frame, font=self.fonts["text"], width=25)

    course_entry.grid(row=3, column=0, padx=5, pady=5, sticky=tk.W)

    tk.Label(form_frame, text="رقم الجوال:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=4,
                                                                                                         column=1,
                                                                                                         padx=5,
                                                                                                         pady=5,
                                                                                                         sticky=tk.E)
    phone_entry = tk.Entry(form_frame, font=self.fonts["text"], width=25)
    phone_entry.grid(row=4, column=0, padx=5, pady=5, sticky=tk.W)

    button_frame = tk.Frame(add_window, bg=self.colors["light"], pady=10)
    button_frame.pack(fill=tk.X)

    def save_student():
        nid = id_entry.get().strip()
        name = name_entry.get().strip()
        rank_ = rank_entry.get().strip()
        course = course_entry.get().strip()
        phone = phone_entry.get().strip()
        if not nid or not name:
            messagebox.showwarning("تنبيه", "يجب إدخال رقم الهوية والاسم على الأقل")
            return
        cursor = self.conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM trainees WHERE national_id=?", (nid,))
        exists = cursor.fetchone()[0]

        # في حالة وجود المتدرب بالفعل، نسأل المستخدم إذا كان يريد الاستمرار
        if exists > 0:
            # تحقق ما إذا كان المتدرب موجود بنفس اسم الدورة
            cursor.execute("SELECT course FROM trainees WHERE national_id=?", (nid,))
            current_course = cursor.fetchone()[0]

            if current_course == course:
                messagebox.showwarning("تنبيه", f"رقم الهوية موجود بالفعل في نفس الدورة: {course}")
                return

            if not messagebox.askyesno("تأكيد الإضافة",
                                       f"المتدرب برقم الهوية {nid} موجود في دورة أخرى: {current_course}\n\nهل تريد حذفه من الدورة السابقة وإضافته للدورة الجديدة: {course}؟"):
                return

            try:
                # حذف المتدرب من الدورة القديمة
                with self.conn:
                    # حذف سجلات الحضور للمتدرب
                    self.conn.execute("DELETE FROM attendance WHERE national_id=?", (nid,))
                    # حذف المتدرب نفسه
                    self.conn.execute("DELETE FROM trainees WHERE national_id=?", (nid,))
            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ أثناء حذف السجل القديم: {str(e)}")
                return

        try:
            with self.conn:
                self.conn.execute("""
                    INSERT INTO trainees (national_id, name, rank, course, phone)
                    VALUES (?, ?, ?, ?, ?)
                """, (nid, name, rank_, course, phone))
            messagebox.showinfo("نجاح", "تمت الإضافة بنجاح")
            add_window.destroy()
            self.update_students_tree()
            self.update_statistics()
        except Exception as e:
            messagebox.showerror("خطأ", str(e))

    save_btn = tk.Button(button_frame, text="حفظ", font=self.fonts["text_bold"], bg=self.colors["success"],
                         fg="white",
                         padx=15, pady=5, bd=0, relief=tk.FLAT, cursor="hand2", command=save_student)
    save_btn.pack(side=tk.LEFT, padx=10)

    cancel_btn = tk.Button(button_frame, text="إلغاء", font=self.fonts["text_bold"], bg=self.colors["danger"],
                           fg="white",
                           padx=15, pady=5, bd=0, relief=tk.FLAT, cursor="hand2", command=add_window.destroy)
    cancel_btn.pack(side=tk.RIGHT, padx=10)

def edit_student(self, from_selection=False):
    if not self.current_user["permissions"]["can_edit_students"]:
        messagebox.showwarning("تنبيه", "ليس لديك صلاحية تعديل بيانات المتدربين")
        return

    if from_selection:
        selected_item = self.students_tree.selection()
        if not selected_item:
            messagebox.showinfo("تنبيه", "الرجاء تحديد متدرب من القائمة")
            return
        values = self.students_tree.item(selected_item, "values")
        nid = values[0]
    else:
        nid = simpledialog.askstring("تعديل متدرب", "أدخل رقم هوية المتدرب:")
        if not nid:
            return

    cursor = self.conn.cursor()

    # أولاً: استرجاع معلومات المتدرب
    cursor.execute("SELECT * FROM trainees WHERE national_id=?", (nid,))
    student = cursor.fetchone()

    if not student:
        messagebox.showinfo("تنبيه", "لا توجد معلومات عن هذا المتدرب")
        return

    # ثانياً: استرجاع سجلات الحضور بشكل منفصل ومباشر
    cursor.execute("""
            SELECT id, national_id, name, rank, course, time, date, status, original_status, 
                   registered_by, excuse_reason, updated_by, updated_at, modification_reason
            FROM attendance 
            WHERE national_id=?
            ORDER BY date DESC
        """, (nid,))
    attendance_records = cursor.fetchall()

    edit_window = tk.Toplevel(self.root)
    edit_window.title("تعديل بيانات المتدرب")
    edit_window.geometry("400x350")
    edit_window.configure(bg=self.colors["light"])
    edit_window.transient(self.root)
    edit_window.grab_set()

    x = (edit_window.winfo_screenwidth() - 400) // 2
    y = (edit_window.winfo_screenheight() - 350) // 2
    edit_window.geometry(f"400x350+{x}+{y}")

    tk.Label(
        edit_window,
        text="تعديل بيانات المتدرب",
        font=self.fonts["title"],
        bg=self.colors["primary"],
        fg="white",
        padx=10, pady=10, width=400
    ).pack(fill=tk.X)

    form_frame = tk.Frame(edit_window, bg=self.colors["light"], padx=20, pady=20)
    form_frame.pack(fill=tk.BOTH)

    tk.Label(form_frame, text="رقم الهوية:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=0,
                                                                                                         column=1,
                                                                                                         padx=5,
                                                                                                         pady=5,
                                                                                                         sticky=tk.E)
    id_entry = tk.Entry(form_frame, font=self.fonts["text"], width=25)
    id_entry.insert(0, student[0])
    id_entry.config(state="disabled")
    id_entry.grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)

    tk.Label(form_frame, text="الاسم:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=1, column=1,
                                                                                                    padx=5, pady=5,
                                                                                                    sticky=tk.E)
    name_entry = tk.Entry(form_frame, font=self.fonts["text"], width=25)
    name_entry.insert(0, student[1])
    name_entry.grid(row=1, column=0, padx=5, pady=5, sticky=tk.W)

    tk.Label(form_frame, text="الرتبة:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=2,
                                                                                                     column=1,
                                                                                                     padx=5, pady=5,
                                                                                                     sticky=tk.E)
    rank_entry = tk.Entry(form_frame, font=self.fonts["text"], width=25)
    rank_entry.insert(0, student[2])
    rank_entry.grid(row=2, column=0, padx=5, pady=5, sticky=tk.W)

    tk.Label(form_frame, text="اسم الدورة:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=3,
                                                                                                         column=1,
                                                                                                         padx=5,
                                                                                                         pady=5,
                                                                                                         sticky=tk.E)

    # عرض قائمة الدورات الحالية
    cursor = self.conn.cursor()
    cursor.execute("SELECT DISTINCT course FROM trainees")
    courses = [row[0] for row in cursor.fetchall() if row[0]]

    if courses:
        course_entry = ttk.Combobox(form_frame, font=self.fonts["text"], width=23, values=courses)
        course_entry.set(student[3])
    else:
        course_entry = tk.Entry(form_frame, font=self.fonts["text"], width=25)
        course_entry.insert(0, student[3])

    course_entry.grid(row=3, column=0, padx=5, pady=5, sticky=tk.W)

    tk.Label(form_frame, text="رقم الجوال:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=4,
                                                                                                         column=1,
                                                                                                         padx=5,
                                                                                                         pady=5,
                                                                                                         sticky=tk.E)
    phone_entry = tk.Entry(form_frame, font=self.fonts["text"], width=25)
    phone_entry.insert(0, student[4])
    phone_entry.grid(row=4, column=0, padx=5, pady=5, sticky=tk.W)

    button_frame = tk.Frame(edit_window, bg=self.colors["light"], pady=10)
    button_frame.pack(fill=tk.X)

    def save_edit():
        new_name = name_entry.get().strip()
        new_rank = rank_entry.get().strip()
        new_course = course_entry.get().strip()
        new_phone = phone_entry.get().strip()
        if not new_name:
            messagebox.showwarning("تنبيه", "لا يمكن ترك حقل الاسم فارغًا")
            return
        try:
            with self.conn:
                # 1. تحديث بيانات المتدرب في جدول trainees
                self.conn.execute("""
                    UPDATE trainees
                    SET name=?, rank=?, course=?, phone=?
                    WHERE national_id=?
                """, (new_name, new_rank, new_course, new_phone, student[0]))

                # 2. تحديث اسم المتدرب والرتبة في جدول attendance
                if new_name != student[1] or new_rank != student[2]:
                    self.conn.execute("""
                        UPDATE attendance
                        SET name=?, rank=?
                        WHERE national_id=?
                    """, (new_name, new_rank, student[0]))

                # 3. إذا تم تغيير اسم الدورة، يجب تحديث سجلات الحضور أيضًا
                if new_course != student[3]:
                    self.conn.execute("""
                        UPDATE attendance
                        SET course=?
                        WHERE national_id=?
                    """, (new_course, student[0]))

                    # تحديث بيانات الفصول إذا كان هناك تغيير في اسم الدورة
                    self.conn.execute("""
                        UPDATE student_sections
                        SET course_name=?
                        WHERE national_id=? AND course_name=?
                    """, (new_course, student[0], student[3]))

            messagebox.showinfo("نجاح", "تم التعديل بنجاح")
            edit_window.destroy()
            self.update_students_tree()
            self.update_attendance_display()  # تحديث عرض الحضور بعد التعديل
        except Exception as e:
            messagebox.showerror("خطأ", str(e))

    save_btn = tk.Button(button_frame, text="حفظ", font=self.fonts["text_bold"], bg=self.colors["success"],
                         fg="white",
                         padx=15, pady=5, bd=0, relief=tk.FLAT, cursor="hand2", command=save_edit)
    save_btn.pack(side=tk.LEFT, padx=10)

    cancel_btn = tk.Button(button_frame, text="إلغاء", font=self.fonts["text_bold"], bg=self.colors["danger"],
                           fg="white",
                           padx=15, pady=5, bd=0, relief=tk.FLAT, cursor="hand2", command=edit_window.destroy)
    cancel_btn.pack(side=tk.RIGHT, padx=10)

def delete_selected_student(self):
    if not self.current_user["permissions"]["can_delete_students"]:
        messagebox.showwarning("تنبيه", "ليس لديك صلاحية حذف المتدربين")
        return

    selected_item = self.students_tree.selection()
    if not selected_item:
        messagebox.showinfo("تنبيه", "الرجاء تحديد متدرب من القائمة")
        return
    values = self.students_tree.item(selected_item, "values")
    nid = values[0]
    if not messagebox.askyesnocancel("تأكيد", f"هل تريد حذف المتدرب صاحب الهوية {nid}؟"):
        return
    try:
        with self.conn:
            self.conn.execute("DELETE FROM trainees WHERE national_id=?", (nid,))
        messagebox.showinfo("نجاح", "تم الحذف بنجاح")
        self.update_students_tree()
        self.update_statistics()
    except Exception as e:
        messagebox.showerror("خطأ", str(e))

def export_course_data(self, course_name):
    """وظيفة تصدير بيانات الدورة مع معلومات تفصيلية عن الغياب والتأخير"""
    if not self.current_user["permissions"]["can_export_data"]:
        messagebox.showwarning("تنبيه", "ليس لديك صلاحية تصدير البيانات")
        return

    try:
        # الحصول على بيانات المتدربين في الدورة
        cursor = self.conn.cursor()

        # استعلام البيانات الأساسية للمتدربين
        cursor.execute("""
            SELECT national_id, name, rank, phone, is_excluded, exclusion_reason, excluded_date
            FROM trainees
            WHERE course=?
        """, (course_name,))
        students_data = cursor.fetchall()

        if not students_data:
            messagebox.showinfo("ملاحظة", f"لا يوجد متدربين مسجلين في الدورة '{course_name}'")
            return

        # إنشاء نافذة حالة لإظهار تقدم التصدير
        progress_window = tk.Toplevel(self.root)
        progress_window.title("جاري تصدير البيانات")
        progress_window.geometry("400x150")
        progress_window.configure(bg=self.colors["light"])
        progress_window.transient(self.root)
        progress_window.resizable(False, False)
        progress_window.grab_set()

        x = (progress_window.winfo_screenwidth() - 400) // 2
        y = (progress_window.winfo_screenheight() - 150) // 2
        progress_window.geometry(f"400x150+{x}+{y}")

        tk.Label(
            progress_window,
            text=f"جاري تصدير بيانات الدورة: {course_name}",
            font=self.fonts["text_bold"],
            bg=self.colors["light"],
            pady=10
        ).pack()

        progress_var = tk.DoubleVar()
        progress_bar = ttk.Progressbar(
            progress_window,
            variable=progress_var,
            maximum=100,
            length=350
        )
        progress_bar.pack(pady=10)

        status_label = tk.Label(
            progress_window,
            text="جاري تحضير البيانات...",
            font=self.fonts["text"],
            bg=self.colors["light"]
        )
        status_label.pack(pady=5)

        progress_window.update()

        # إنشاء قاموس لتخزين بيانات كل متدرب
        students_dict = {}

        total_students = len(students_data)

        for index, student in enumerate(students_data):
            national_id, name, rank, phone, is_excluded, exclusion_reason, excluded_date = student

            # تحديث شريط التقدم
            progress_var.set((index / total_students) * 50)  # نصف التقدم للاستعلامات
            status_label.config(text=f"تحليل بيانات المتدرب {index + 1} من {total_students}: {name}")
            progress_window.update()

            # إحصاء حالات الغياب والتأخير لكل متدرب
            cursor.execute("""
                SELECT status, COUNT(*) 
                FROM attendance 
                WHERE national_id=? AND status IN ('غائب', 'متأخر', 'غائب بعذر')
                GROUP BY status
            """, (national_id,))
            status_counts = dict(cursor.fetchall())

            # الحصول على تواريخ الغياب
            cursor.execute("""
                SELECT date FROM attendance 
                WHERE national_id=? AND status='غائب'
                ORDER BY date
            """, (national_id,))
            absent_dates = [row[0] for row in cursor.fetchall()]
            absent_dates_str = " || ".join(absent_dates) if absent_dates else ""

            # الحصول على تواريخ التأخير
            cursor.execute("""
                SELECT date FROM attendance 
                WHERE national_id=? AND status='متأخر'
                ORDER BY date
            """, (national_id,))
            late_dates = [row[0] for row in cursor.fetchall()]
            late_dates_str = " || ".join(late_dates) if late_dates else ""

            # الحصول على أسباب وتواريخ الغياب بعذر
            cursor.execute("""
                SELECT date, excuse_reason 
                FROM attendance 
                WHERE national_id=? AND status='غائب بعذر'
                ORDER BY date
            """, (national_id,))
            excused_data = cursor.fetchall()

            excused_dates = [row[0] for row in excused_data]
            excused_dates_str = " || ".join(excused_dates) if excused_dates else ""

            # تجميع أسباب الغياب بعذر
            excuses_text = ""
            for date, reason in excused_data:
                if reason:
                    excuses_text += f"{date}: {reason} || "

            if excuses_text.endswith(" || "):
                excuses_text = excuses_text[:-4]

            # تنسيق حالة الاستبعاد
            excluded_status = "مستبعد" if is_excluded else "موجود"
            exclusion_info = exclusion_reason if is_excluded else "لا يوجد"
            exclusion_date = excluded_date if is_excluded else ""

            # تخزين البيانات في القاموس
            students_dict[national_id] = {
                "رقم الهوية": national_id,
                "الاسم": name,
                "الرتبة": rank,
                "الدورة": course_name,
                "رقم الجوال": phone,
                "عدد أيام الغياب": status_counts.get("غائب", 0),
                "تواريخ الغياب": absent_dates_str,
                "عدد أيام التأخير": status_counts.get("متأخر", 0),
                "تواريخ التأخير": late_dates_str,
                "عدد أيام الغياب بعذر": status_counts.get("غائب بعذر", 0),
                "أسباب الغياب بعذر": excuses_text,
                "حالة المتدرب": excluded_status,
                "سبب الاستبعاد": exclusion_info,
                "تاريخ الاستبعاد": exclusion_date
            }

        # تحويل القاموس إلى DataFrame
        progress_var.set(60)
        status_label.config(text="إنشاء ملف التصدير...")
        progress_window.update()

        df = pd.DataFrame(list(students_dict.values()))

        # حفظ الإكسل
        progress_var.set(70)
        status_label.config(text="فتح حوار حفظ الملف...")
        progress_window.update()

        export_file = filedialog.asksaveasfilename(
            defaultextension=".xlsx",
            filetypes=[("Excel files", "*.xlsx")],
            initialfile=f"دورة_{course_name}.xlsx"
        )

        if not export_file:
            progress_window.destroy()
            return

        # تصدير إلى ملف إكسل مع معالجة خاصة للخلايا
        progress_var.set(80)
        status_label.config(text="إنشاء ملف Excel...")
        progress_window.update()

        writer = pd.ExcelWriter(export_file, engine='xlsxwriter')
        df.to_excel(writer, index=False, sheet_name='بيانات الدورة')

        # الحصول على workbook وورقة العمل
        workbook = writer.book
        worksheet = writer.sheets['بيانات الدورة']

        # تنسيق الخلايا
        header_format = workbook.add_format({
            'bold': True,
            'text_wrap': True,
            'valign': 'top',
            'fg_color': '#4F81BD',
            'font_color': 'white',
            'border': 1,
            'align': 'center'
        })

        # تنسيق للمحتوى
        content_format = workbook.add_format({
            'text_wrap': True,
            'valign': 'top',
            'align': 'right',
            'border': 1
        })

        # تطبيق التنسيق على الرؤوس
        progress_var.set(90)
        status_label.config(text="تنسيق الملف...")
        progress_window.update()

        for col_num, value in enumerate(df.columns.values):
            worksheet.write(0, col_num, value, header_format)

        # تعديل عرض الأعمدة وتطبيق التنسيق
        for i, col in enumerate(df.columns):
            # تعيين عرض مناسب لكل عمود
            column_width = max(
                df[col].astype(str).map(len).max(),  # أطول نص في العمود
                len(str(col)) + 2  # عرض عنوان العمود + هامش
            )
            # تحديد حد أقصى
            if column_width > 50:
                column_width = 50
            worksheet.set_column(i, i, column_width, content_format)

        # إضافة تنسيق لجدول البيانات (تصميم الجدول)
        worksheet.add_table(0, 0, len(df), len(df.columns) - 1, {
            'style': 'Table Style Medium 2',
            'columns': [{'header': col} for col in df.columns]
        })

        # حفظ الملف
        progress_var.set(95)
        status_label.config(text="حفظ الملف...")
        progress_window.update()

        writer.close()

        progress_var.set(100)
        status_label.config(text="تم تصدير البيانات بنجاح!")
        progress_window.update()

        # إغلاق نافذة التقدم بعد ثانيتين
        progress_window.after(2000, progress_window.destroy)

        messagebox.showinfo("نجاح", f"تم تصدير بيانات الدورة '{course_name}' بنجاح إلى الملف:\n{export_file}")

    except Exception as e:
        try:
            progress_window.destroy()
        except:
            pass
        messagebox.showerror("خطأ", f"حدث خطأ أثناء تصدير بيانات الدورة: {str(e)}")

def import_new_course(self):
    """
    دالة استيراد دورة جديدة من ملف Excel
    مع إضافة تاريخ بداية ونهاية الدورة وفئة الدورة
    """
    if not self.current_user["permissions"]["can_import_data"]:
        messagebox.showwarning("تنبيه", "ليس لديك صلاحية استيراد البيانات")
        return

    import_window = tk.Toplevel(self.root)
    import_window.title("استيراد دورة جديدة")
    import_window.geometry("500x750")  # زيادة ارتفاع النافذة
    import_window.configure(bg=self.colors["light"])
    import_window.transient(self.root)
    import_window.grab_set()

    x = (import_window.winfo_screenwidth() - 500) // 2
    y = (import_window.winfo_screenheight() - 750) // 2
    import_window.geometry(f"500x750+{x}+{y}")

    tk.Label(
        import_window,
        text="استيراد دورة جديدة",
        font=self.fonts["title"],
        bg=self.colors["primary"],
        fg="white",
        padx=10, pady=10
    ).pack(fill=tk.X)

    input_frame = tk.Frame(import_window, bg=self.colors["light"], padx=20, pady=20)
    input_frame.pack(fill=tk.BOTH, expand=True)

    tk.Label(
        input_frame,
        text="اسم الدورة الجديدة:",
        font=self.fonts["text_bold"],
        bg=self.colors["light"]
    ).pack(anchor=tk.W, pady=(0, 5))

    course_entry = tk.Entry(input_frame, font=self.fonts["text"], width=40)
    course_entry.pack(fill=tk.X, pady=(0, 20))

    # إضافة قائمة منسدلة لفئة الدورة
    category_frame = tk.Frame(input_frame, bg=self.colors["light"])
    category_frame.pack(fill=tk.X, pady=10)

    tk.Label(
        category_frame,
        text="فئة الدورة:",
        font=self.fonts["text_bold"],
        bg=self.colors["light"]
    ).pack(side=tk.RIGHT, padx=5)

    course_categories = ["ضباط", "أفراد", "مشتركة", "مدنيين"]
    category_var = tk.StringVar(value="مشتركة")
    category_combo = ttk.Combobox(
        category_frame,
        textvariable=category_var,
        values=course_categories,
        state="readonly",
        width=20,
        font=self.fonts["text"]
    )
    category_combo.pack(side=tk.RIGHT, padx=5)

    # إضافة إطار لتاريخ نهاية الدورة في النظام
    system_end_date_frame = tk.LabelFrame(
        input_frame,
        text="تاريخ نهاية الدورة في النظام",
        font=self.fonts["text_bold"],
        bg=self.colors["light"],
        padx=10,
        pady=10
    )
    system_end_date_frame.pack(fill=tk.X, pady=10)

    system_end_date_entry = DateEntry(
        system_end_date_frame,
        width=15,
        background=self.colors["primary"],
        foreground='white',
        borderwidth=2,
        date_pattern='yyyy-mm-dd',
        font=self.fonts["text"],
        firstweekday="sunday"
    )
    system_end_date_entry.pack(pady=5)

    # إطار لتاريخ بداية الدورة النصي (للعرض فقط)
    start_date_frame = tk.LabelFrame(input_frame, text="تاريخ بداية الدورة (للعرض)", font=self.fonts["text_bold"],
                                     bg=self.colors["light"], padx=10, pady=10)
    start_date_frame.pack(fill=tk.X, pady=10)

    # حقول تاريخ البداية
    start_date_fields = tk.Frame(start_date_frame, bg=self.colors["light"])
    start_date_fields.pack(fill=tk.X)

    # اليوم
    tk.Label(start_date_fields, text="اليوم:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                      padx=5)
    start_day_entry = tk.Entry(start_date_fields, font=self.fonts["text"], width=5)
    start_day_entry.pack(side=tk.RIGHT, padx=5)

    # الشهر
    tk.Label(start_date_fields, text="الشهر:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                      padx=5)
    start_month_entry = tk.Entry(start_date_fields, font=self.fonts["text"], width=5)
    start_month_entry.pack(side=tk.RIGHT, padx=5)

    # السنة
    tk.Label(start_date_fields, text="السنة:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                      padx=5)
    start_year_entry = tk.Entry(start_date_fields, font=self.fonts["text"], width=8)
    start_year_entry.pack(side=tk.RIGHT, padx=5)

    # إطار لتاريخ نهاية الدورة النصي (للعرض فقط)
    end_date_frame = tk.LabelFrame(input_frame, text="تاريخ نهاية الدورة (للعرض)", font=self.fonts["text_bold"],
                                   bg=self.colors["light"], padx=10, pady=10)
    end_date_frame.pack(fill=tk.X, pady=10)

    # حقول تاريخ النهاية
    end_date_fields = tk.Frame(end_date_frame, bg=self.colors["light"])
    end_date_fields.pack(fill=tk.X)

    # اليوم
    tk.Label(end_date_fields, text="اليوم:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                    padx=5)
    end_day_entry = tk.Entry(end_date_fields, font=self.fonts["text"], width=5)
    end_day_entry.pack(side=tk.RIGHT, padx=5)

    # الشهر
    tk.Label(end_date_fields, text="الشهر:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                    padx=5)
    end_month_entry = tk.Entry(end_date_fields, font=self.fonts["text"], width=5)
    end_month_entry.pack(side=tk.RIGHT, padx=5)

    # السنة
    tk.Label(end_date_fields, text="السنة:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                    padx=5)
    end_year_entry = tk.Entry(end_date_fields, font=self.fonts["text"], width=8)
    end_year_entry.pack(side=tk.RIGHT, padx=5)

    # القيود على حقول التاريخ
    def validate_number(P, max_length):
        if P == "":
            return True
        if not P.isdigit():
            return False
        if len(P) > max_length:
            return False
        return True

    # تسجيل وظائف التحقق
    validate_day = import_window.register(lambda P: validate_number(P, 2))
    validate_month = import_window.register(lambda P: validate_number(P, 2))
    validate_year = import_window.register(lambda P: validate_number(P, 4))

    # تطبيق القيود
    start_day_entry.config(validate="key", validatecommand=(validate_day, "%P"))
    start_month_entry.config(validate="key", validatecommand=(validate_month, "%P"))
    start_year_entry.config(validate="key", validatecommand=(validate_year, "%P"))

    end_day_entry.config(validate="key", validatecommand=(validate_day, "%P"))
    end_month_entry.config(validate="key", validatecommand=(validate_month, "%P"))
    end_year_entry.config(validate="key", validatecommand=(validate_year, "%P"))

    columns_frame = tk.Frame(input_frame, bg=self.colors["light"])
    columns_frame.pack(fill=tk.X, pady=5)

    tk.Label(
        input_frame,
        text="يجب أن يكون ترتيب أسماء الأعمدة كما يلي : (الاسم - الرتبة - رقم الهوية - رقم الجوال)",
        font=self.fonts["text"],
        bg=self.colors["light"],
        fg=self.colors["secondary"]
    ).pack(anchor=tk.W, pady=(0, 10))

    file_frame = tk.Frame(input_frame, bg=self.colors["light"])
    file_frame.pack(fill=tk.X)

    file_path_var = tk.StringVar()
    file_entry = tk.Entry(file_frame, textvariable=file_path_var, font=self.fonts["text"], width=30,
                          state="readonly")
    file_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 10))

    def browse_file():
        file_path = filedialog.askopenfilename(
            title="اختر ملف Excel",
            filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")]
        )
        if file_path:
            file_path_var.set(file_path)

    browse_btn = tk.Button(
        file_frame,
        text="استعراض...",
        font=self.fonts["text"],
        bg=self.colors["secondary"],
        fg="white",
        padx=10, pady=3,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=browse_file
    )
    browse_btn.pack(side=tk.RIGHT)

    def import_course():
        course_name = course_entry.get().strip()
        file_path = file_path_var.get().strip()
        category = category_var.get()
        system_end_date = system_end_date_entry.get_date().strftime("%Y-%m-%d")

        start_day = start_day_entry.get().strip()
        start_month = start_month_entry.get().strip()
        start_year = start_year_entry.get().strip()
        end_day = end_day_entry.get().strip()
        end_month = end_month_entry.get().strip()
        end_year = end_year_entry.get().strip()

        # التحقق من البيانات
        if not course_name:
            messagebox.showwarning("تنبيه", "الرجاء إدخال اسم الدورة")
            return

        if not file_path:
            messagebox.showwarning("تنبيه", "الرجاء اختيار ملف Excel")
            return

        # التحقق من تواريخ البداية والنهاية (اختياري)
        date_valid = True
        date_message = ""

        if (start_day or start_month or start_year) and not (start_day and start_month and start_year):
            date_valid = False
            date_message = "يجب إدخال تاريخ بداية الدورة كاملاً (اليوم والشهر والسنة)"

        if (end_day or end_month or end_year) and not (end_day and end_month and end_year):
            date_valid = False
            date_message = "يجب إدخال تاريخ نهاية الدورة كاملاً (اليوم والشهر والسنة)"

        if not date_valid:
            messagebox.showwarning("تنبيه", date_message)
            return

        # فحص المتدربين المتكررين واستكمال عملية الاستيراد
        self.check_duplicate_students_with_dates(file_path, course_name,
                                                 start_day, start_month, start_year,
                                                 end_day, end_month, end_year,
                                                 system_end_date, category)
        import_window.destroy()

    button_frame = tk.Frame(import_window, bg=self.colors["light"], pady=10)
    button_frame.pack(fill=tk.X, padx=20)

    import_btn = tk.Button(
        button_frame,
        text="استيراد",
        font=self.fonts["text_bold"],
        bg=self.colors["success"],
        fg="white",
        padx=15, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=import_course
    )
    import_btn.pack(side=tk.LEFT, padx=5)

    cancel_btn = tk.Button(
        button_frame,
        text="إلغاء",
        font=self.fonts["text_bold"],
        bg=self.colors["danger"],
        fg="white",
        padx=15, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=import_window.destroy
    )
    cancel_btn.pack(side=tk.RIGHT, padx=5)

def save_course_dates_and_category(self, course_name, start_day, start_month, start_year,
                                   end_day, end_month, end_year, system_end_date, category):
    """
    حفظ تواريخ بداية ونهاية الدورة وفئتها في قاعدة البيانات
    """
    try:
        current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        with self.conn:
            # التحقق من وجود الدورة
            cursor = self.conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM course_info WHERE course_name=?", (course_name,))
            exists = cursor.fetchone()[0] > 0

            if exists:
                # تحديث بيانات الدورة الموجودة
                self.conn.execute("""
                    UPDATE course_info 
                    SET start_day=?, start_month=?, start_year=?, 
                        end_day=?, end_month=?, end_year=?,
                        end_date_system=?, course_category=?
                    WHERE course_name=?
                """, (start_day, start_month, start_year, end_day, end_month, end_year,
                      system_end_date, category, course_name))
            else:
                # إضافة دورة جديدة
                self.conn.execute("""
                    INSERT INTO course_info 
                    (course_name, start_day, start_month, start_year, end_day, end_month, end_year, 
                     end_date_system, course_category, created_date)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (course_name, start_day, start_month, start_year, end_day, end_month, end_year,
                      system_end_date, category, current_date))

        return True
    except Exception as e:
        print(f"خطأ في حفظ بيانات الدورة: {str(e)}")
        return False

def check_duplicate_students_with_dates(self, file_path, course_name,
                                        start_day, start_month, start_year,
                                        end_day, end_month, end_year,
                                        system_end_date, category):
    """
    فحص المتدربين المتكررين قبل استيراد دورة جديدة مع دعم تواريخ البداية والنهاية وفئة الدورة
    """
    try:
        # إنشاء نافذة حالة لإظهار تقدم العملية
        progress_window = tk.Toplevel(self.root)
        progress_window.title("فحص المتدربين المتكررين")
        progress_window.geometry("400x150")
        progress_window.configure(bg=self.colors["light"])
        progress_window.transient(self.root)
        progress_window.grab_set()

        # توسيط النافذة
        x = (progress_window.winfo_screenwidth() - 400) // 2
        y = (progress_window.winfo_screenheight() - 150) // 2
        progress_window.geometry(f"400x150+{x}+{y}")

        tk.Label(
            progress_window,
            text="جاري فحص المتدربين المتكررين...",
            font=self.fonts["text_bold"],
            bg=self.colors["light"],
            pady=10
        ).pack()

        progress_var = tk.DoubleVar()
        progress_bar = ttk.Progressbar(
            progress_window,
            variable=progress_var,
            maximum=100,
            length=350
        )
        progress_bar.pack(pady=10)

        status_label = tk.Label(
            progress_window,
            text="جاري قراءة ملف Excel...",
            font=self.fonts["text"],
            bg=self.colors["light"]
        )
        status_label.pack(pady=5)

        progress_window.update()

        # قراءة ملف Excel
        df = pd.read_excel(file_path)

        # تحديد الأعمدة المطلوبة (دعم الأسماء العربية والإنجليزية)
        column_mapping = {
            'الاسم': 'name',
            'رقم الهوية': 'national_id',
            'الرتبة': 'rank',
            'رقم الجوال': 'phone',
            'name': 'name',
            'national_id': 'national_id',
            'rank': 'rank',
            'phone': 'phone'
        }

        # تغيير أسماء الأعمدة إلى النموذج الإنجليزي
        df_columns = list(df.columns)
        english_columns = {}

        for col in df_columns:
            if col in column_mapping:
                english_columns[col] = column_mapping[col]

        # التحقق من وجود الأعمدة المطلوبة
        required_cols_ar = ["الاسم", "رقم الهوية", "الرتبة", "رقم الجوال"]
        required_cols_en = ["name", "national_id", "rank", "phone"]

        # التحقق من وجود العمود بأي من اللغتين
        has_name = any(col in ["الاسم", "name"] for col in df_columns)
        has_id = any(col in ["رقم الهوية", "national_id"] for col in df_columns)
        has_rank = any(col in ["الرتبة", "rank"] for col in df_columns)
        has_phone = any(col in ["رقم الجوال", "phone"] for col in df_columns)

        if not (has_name and has_id):
            progress_window.destroy()
            messagebox.showwarning("تحذير",
                                   "يجب أن يحتوي الملف على الأعمدة التالية على الأقل:\n"
                                   "- الاسم (name)\n"
                                   "- رقم الهوية (national_id)")
            return False

        # إعادة تسمية الأعمدة للاستخدام الداخلي
        rename_dict = {}
        for orig_col in df.columns:
            if orig_col in column_mapping:
                rename_dict[orig_col] = column_mapping[orig_col]

        if rename_dict:
            df = df.rename(columns=rename_dict)

        # إضافة الأعمدة المفقودة (اختياري) إذا لم تكن موجودة
        if 'rank' not in df.columns:
            df['rank'] = ''
        if 'phone' not in df.columns:
            df['phone'] = ''

        # قائمة المتدربين المتكررين
        duplicates = []

        # فحص كل متدرب
        progress_var.set(20)
        status_label.config(text="جاري فحص المتدربين المتكررين...")
        progress_window.update()

        total_rows = len(df)
        cursor = self.conn.cursor()

        for i, row in enumerate(df.iterrows()):
            # تحديث شريط التقدم
            progress = 20 + (i / total_rows * 60)
            progress_var.set(progress)

            _, row_data = row
            # تحويل رقم الهوية إلى نص
            nid = str(row_data["national_id"]).strip()
            name = str(row_data["name"]).strip()

            if i % 10 == 0:
                status_label.config(text=f"فحص المتدرب {i + 1} من {total_rows}: {name}")
                progress_window.update()

            # التحقق من وجود المتدرب
            cursor.execute("""
                SELECT t.course, t.name
                FROM trainees t
                WHERE t.national_id=?
            """, (nid,))

            result = cursor.fetchone()
            if result:
                current_course, current_name = result
                duplicates.append({
                    "id": nid,
                    "name": name,
                    "current_course": current_course
                })

        progress_window.destroy()

        # حفظ تواريخ الدورة وفئتها بغض النظر عن وجود متدربين متكررين
        self.save_course_dates_and_category(course_name, start_day, start_month, start_year,
                                            end_day, end_month, end_year, system_end_date, category)

        # عرض النتائج
        if duplicates:
            # عرض رسالة بأسماء المتدربين المتكررين فقط
            duplicate_details = f"تم العثور على {len(duplicates)} متدرب موجودين بالفعل في دورات أخرى:\n\n"

            # عرض أول 10 متدربين فقط لتجنب رسائل طويلة جداً
            display_count = min(10, len(duplicates))
            for i in range(display_count):
                duplicate_details += f"{i + 1}. {duplicates[i]['name']} (هوية: {duplicates[i]['id']}) - دورة: {duplicates[i]['current_course']}\n"

            if len(duplicates) > 10:
                duplicate_details += f"\n... وغيرهم ({len(duplicates) - 10} آخرين)"

            duplicate_details += "\n\nهل تريد نقل هؤلاء المتدربين من دوراتهم السابقة إلى الدورة الجديدة؟"

            choice = messagebox.askquestion("متدربين متكررين", duplicate_details, type=messagebox.YESNOCANCEL)

            if choice == "cancel":
                return False

            # متابعة الاستيراد مع خيار النقل (True) أو التخطي (False)
            update_mode = (choice == "yes")

            # إضافة سؤال عما إذا كانت الدورة متعددة الفصول
            is_multi_section = messagebox.askyesno("نوع الدورة", f"هل الدورة '{course_name}' متعددة الفصول؟")

            sections_count = 1
            if is_multi_section:
                # طلب عدد الفصول
                sections_count_str = simpledialog.askstring("عدد الفصول", "كم عدد الفصول في هذه الدورة؟",
                                                            initialvalue="2")
                if not sections_count_str:
                    return False

                try:
                    sections_count = int(sections_count_str)
                    if sections_count <= 0:
                        messagebox.showwarning("تنبيه", "يجب أن يكون عدد الفصول أكبر من صفر")
                        return False
                except:
                    messagebox.showwarning("تنبيه", "الرجاء إدخال رقم صحيح لعدد الفصول")
                    return False
            else:
                # إذا كانت الدورة غير متعددة الفصول، نجعلها بفصل واحد فقط
                sections_count = 1
                messagebox.showinfo("معلومات",
                                    f"سيتم إنشاء فصل واحد للدورة '{course_name}' ويمكنك إدارة الفصول لاحقًا من 'إدارة الفصول وتصدير الكشوفات'")

            # استدعاء دالة معالجة الاستيراد
            self.process_course_import_arabic(file_path, course_name, is_multi_section, sections_count, update_mode)
            return True
        else:
            messagebox.showinfo("تقرير الفحص",
                                f"لم يتم العثور على متدربين متكررين. يمكنك المتابعة في استيراد الدورة '{course_name}'.")
            # إضافة سؤال عما إذا كانت الدورة متعددة الفصول
            is_multi_section = messagebox.askyesno("نوع الدورة", f"هل الدورة '{course_name}' متعددة الفصول؟")

            sections_count = 1
            if is_multi_section:
                # طلب عدد الفصول
                sections_count_str = simpledialog.askstring("عدد الفصول", "كم عدد الفصول في هذه الدورة؟",
                                                            initialvalue="2")
                if not sections_count_str:
                    return False

                try:
                    sections_count = int(sections_count_str)
                    if sections_count <= 0:
                        messagebox.showwarning("تنبيه", "يجب أن يكون عدد الفصول أكبر من صفر")
                        return False
                except:
                    messagebox.showwarning("تنبيه", "الرجاء إدخال رقم صحيح لعدد الفصول")
                    return False
            else:
                # إذا كانت الدورة غير متعددة الفصول، نجعلها بفصل واحد فقط
                sections_count = 1
                messagebox.showinfo("معلومات",
                                    f"سيتم إنشاء فصل واحد للدورة '{course_name}' ويمكنك إدارة الفصول لاحقًا من 'إدارة الفصول وتصدير الكشوفات'")

            # استدعاء دالة معالجة الاستيراد
            self.process_course_import_arabic(file_path, course_name, is_multi_section, sections_count, False)
            return False

    except Exception as e:
        try:
            progress_window.destroy()
        except:
            pass
        messagebox.showerror("خطأ", f"حدث خطأ أثناء فحص المتدربين المتكررين: {str(e)}")
        return False

def save_course_dates(self, course_name, start_day, start_month, start_year, end_day, end_month, end_year):
    """
    حفظ تواريخ بداية ونهاية الدورة في قاعدة البيانات
    """
    try:
        current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        with self.conn:
            # التحقق من وجود الدورة
            cursor = self.conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM course_info WHERE course_name=?", (course_name,))
            exists = cursor.fetchone()[0] > 0

            if exists:
                # تحديث بيانات الدورة الموجودة
                self.conn.execute("""
                    UPDATE course_info 
                    SET start_day=?, start_month=?, start_year=?, 
                        end_day=?, end_month=?, end_year=?
                    WHERE course_name=?
                """, (start_day, start_month, start_year, end_day, end_month, end_year, course_name))
            else:
                # إضافة دورة جديدة
                self.conn.execute("""
                    INSERT INTO course_info 
                    (course_name, start_day, start_month, start_year, end_day, end_month, end_year, created_date)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                """, (course_name, start_day, start_month, start_year, end_day, end_month, end_year, current_date))

        return True
    except Exception as e:
        print(f"خطأ في حفظ تواريخ الدورة: {str(e)}")
        return False

def edit_course_dates(self, course_name):
    """تعديل اسم الدورة وتواريخ بداية ونهاية الدورة وفئتها"""

    # استرجاع البيانات الحالية من قاعدة البيانات
    cursor = self.conn.cursor()
    cursor.execute("""
        SELECT start_day, start_month, start_year, end_day, end_month, end_year, 
               end_date_system, course_category
        FROM course_info
        WHERE course_name=?
    """, (course_name,))

    current_info = cursor.fetchone()
    current_dates = current_info[:6] if current_info else ["", "", "", "", "", ""]
    current_end_date_system = current_info[6] if current_info and len(current_info) > 6 else None
    current_category = current_info[7] if current_info and len(current_info) > 7 else "مشتركة"

    # إنشاء نافذة تعديل البيانات
    edit_window = tk.Toplevel(self.root)
    edit_window.title(f"تعديل بيانات دورة: {course_name}")
    edit_window.geometry("600x750")  # زيادة الارتفاع لاستيعاب حقل الفئة
    edit_window.configure(bg=self.colors["light"])
    edit_window.transient(self.root)
    edit_window.grab_set()

    # توسيط النافذة
    x = (edit_window.winfo_screenwidth() - 600) // 2
    y = (edit_window.winfo_screenheight() - 750) // 2
    edit_window.geometry(f"600x750+{x}+{y}")

    # عنوان النافذة
    tk.Label(
        edit_window,
        text="تعديل بيانات الدورة",
        font=self.fonts["title"],
        bg=self.colors["primary"],
        fg="white",
        padx=10, pady=10
    ).pack(fill=tk.X)

    # إطار المحتويات
    content_frame = tk.Frame(edit_window, bg=self.colors["light"], padx=20, pady=20)
    content_frame.pack(fill=tk.BOTH, expand=True)

    # حقل اسم الدورة
    name_frame = tk.LabelFrame(
        content_frame,
        text="اسم الدورة",
        font=self.fonts["text_bold"],
        bg=self.colors["light"],
        padx=10, pady=10
    )
    name_frame.pack(fill=tk.X, pady=10)

    new_course_name_var = tk.StringVar(value=course_name)
    course_name_entry = tk.Entry(
        name_frame,
        textvariable=new_course_name_var,
        font=self.fonts["text"],
        width=40
    )
    course_name_entry.pack(pady=5)

    # إطار فئة الدورة
    category_frame = tk.LabelFrame(
        content_frame,
        text="فئة الدورة",
        font=self.fonts["text_bold"],
        bg=self.colors["light"],
        padx=10, pady=10
    )
    category_frame.pack(fill=tk.X, pady=10)

    category_var = tk.StringVar(value=current_category)
    category_combo = ttk.Combobox(
        category_frame,
        textvariable=category_var,
        values=["ضباط", "أفراد", "مشتركة", "مدنيين"],
        state="readonly",
        width=20,
        font=self.fonts["text"]
    )
    category_combo.pack(pady=5)

    # إطار لتاريخ نهاية الدورة في النظام
    system_end_date_frame = tk.LabelFrame(
        content_frame,
        text="تاريخ نهاية الدورة في النظام",
        font=self.fonts["text_bold"],
        bg=self.colors["light"],
        padx=10, pady=10
    )
    system_end_date_frame.pack(fill=tk.X, pady=10)

    system_end_date_entry = DateEntry(
        system_end_date_frame,
        width=15,
        background=self.colors["primary"],
        foreground='white',
        borderwidth=2,
        date_pattern='yyyy-mm-dd',
        font=self.fonts["text"],
        firstweekday="sunday"
    )
    system_end_date_entry.pack(pady=5)

    # تعيين التاريخ الحالي إذا كان موجوداً
    if current_end_date_system:
        try:
            date_obj = datetime.datetime.strptime(current_end_date_system, "%Y-%m-%d")
            system_end_date_entry.set_date(date_obj)
        except:
            pass

    # إضافة إطار لتاريخ بداية الدورة
    start_date_frame = tk.LabelFrame(
        content_frame,
        text="تاريخ بداية الدورة (للعرض)",
        font=self.fonts["text_bold"],
        bg=self.colors["light"],
        padx=10, pady=10
    )
    start_date_frame.pack(fill=tk.X, pady=10)

    # حقول تاريخ البداية
    start_date_fields = tk.Frame(start_date_frame, bg=self.colors["light"])
    start_date_fields.pack(fill=tk.X)

    # اليوم
    tk.Label(start_date_fields, text="اليوم:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                      padx=5)
    start_day_entry = tk.Entry(start_date_fields, font=self.fonts["text"], width=5)
    start_day_entry.insert(0, current_dates[0] if current_dates[0] else "")
    start_day_entry.pack(side=tk.RIGHT, padx=5)

    # الشهر
    tk.Label(start_date_fields, text="الشهر:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                      padx=5)
    start_month_entry = tk.Entry(start_date_fields, font=self.fonts["text"], width=5)
    start_month_entry.insert(0, current_dates[1] if current_dates[1] else "")
    start_month_entry.pack(side=tk.RIGHT, padx=5)

    # السنة
    tk.Label(start_date_fields, text="السنة:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                      padx=5)
    start_year_entry = tk.Entry(start_date_fields, font=self.fonts["text"], width=8)
    start_year_entry.insert(0, current_dates[2] if current_dates[2] else "")
    start_year_entry.pack(side=tk.RIGHT, padx=5)

    # إطار لتاريخ نهاية الدورة
    end_date_frame = tk.LabelFrame(
        content_frame,
        text="تاريخ نهاية الدورة (للعرض)",
        font=self.fonts["text_bold"],
        bg=self.colors["light"],
        padx=10, pady=10
    )
    end_date_frame.pack(fill=tk.X, pady=10)

    # حقول تاريخ النهاية
    end_date_fields = tk.Frame(end_date_frame, bg=self.colors["light"])
    end_date_fields.pack(fill=tk.X)

    # اليوم
    tk.Label(end_date_fields, text="اليوم:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                    padx=5)
    end_day_entry = tk.Entry(end_date_fields, font=self.fonts["text"], width=5)
    end_day_entry.insert(0, current_dates[3] if current_dates[3] else "")
    end_day_entry.pack(side=tk.RIGHT, padx=5)

    # الشهر
    tk.Label(end_date_fields, text="الشهر:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                    padx=5)
    end_month_entry = tk.Entry(end_date_fields, font=self.fonts["text"], width=5)
    end_month_entry.insert(0, current_dates[4] if current_dates[4] else "")
    end_month_entry.pack(side=tk.RIGHT, padx=5)

    # السنة
    tk.Label(end_date_fields, text="السنة:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                    padx=5)
    end_year_entry = tk.Entry(end_date_fields, font=self.fonts["text"], width=8)
    end_year_entry.insert(0, current_dates[5] if current_dates[5] else "")
    end_year_entry.pack(side=tk.RIGHT, padx=5)

    # أزرار الحفظ والإلغاء
    buttons_frame = tk.Frame(edit_window, bg=self.colors["light"], pady=20)
    buttons_frame.pack(fill=tk.X, padx=10)

    def save_changes():
        """حفظ التغييرات"""
        new_name = new_course_name_var.get().strip()
        new_category = category_var.get()
        start_day = start_day_entry.get().strip()
        start_month = start_month_entry.get().strip()
        start_year = start_year_entry.get().strip()
        end_day = end_day_entry.get().strip()
        end_month = end_month_entry.get().strip()
        end_year = end_year_entry.get().strip()
        system_end_date = system_end_date_entry.get_date().strftime("%Y-%m-%d")

        # التحقق من صحة البيانات
        if not new_name:
            messagebox.showwarning("تنبيه", "اسم الدورة لا يمكن أن يكون فارغاً")
            return

        if (start_day or start_month or start_year) and not (start_day and start_month and start_year):
            messagebox.showwarning("تنبيه", "يجب إدخال تاريخ بداية الدورة كاملاً (اليوم والشهر والسنة)")
            return

        if (end_day or end_month or end_year) and not (end_day and end_month and end_year):
            messagebox.showwarning("تنبيه", "يجب إدخال تاريخ نهاية الدورة كاملاً (اليوم والشهر والسنة)")
            return

        try:
            with self.conn:
                # إذا تم تغيير اسم الدورة
                if new_name != course_name:
                    # التحقق من عدم وجود دورة بنفس الاسم الجديد
                    cursor.execute("SELECT COUNT(*) FROM course_info WHERE course_name=?", (new_name,))
                    if cursor.fetchone()[0] > 0:
                        messagebox.showwarning("تنبيه", f"يوجد دورة أخرى بنفس الاسم '{new_name}'")
                        return

                    # تحديث اسم الدورة في جميع الجداول المرتبطة
                    # 1. جدول المتدربين
                    self.conn.execute("UPDATE trainees SET course=? WHERE course=?", (new_name, course_name))

                    # 2. جدول الحضور
                    self.conn.execute("UPDATE attendance SET course=? WHERE course=?", (new_name, course_name))

                    # 3. جدول الفصول
                    self.conn.execute("UPDATE course_sections SET course_name=? WHERE course_name=?",
                                      (new_name, course_name))

                    # 4. جدول توزيع المتدربين على الفصول
                    self.conn.execute("UPDATE student_sections SET course_name=? WHERE course_name=?",
                                      (new_name, course_name))

                    # 5. جدول معلومات الدورة
                    self.conn.execute("""
                        UPDATE course_info 
                        SET course_name=?, start_day=?, start_month=?, start_year=?, 
                            end_day=?, end_month=?, end_year=?, end_date_system=?,
                            course_category=?
                        WHERE course_name=?
                    """, (new_name, start_day, start_month, start_year, end_day, end_month, end_year,
                          system_end_date, new_category, course_name))
                else:
                    # تحديث البيانات فقط
                    self.conn.execute("""
                        UPDATE course_info 
                        SET start_day=?, start_month=?, start_year=?, 
                            end_day=?, end_month=?, end_year=?, end_date_system=?,
                            course_category=?
                        WHERE course_name=?
                    """, (start_day, start_month, start_year, end_day, end_month, end_year,
                          system_end_date, new_category, course_name))

            messagebox.showinfo("نجاح", "تم حفظ التغييرات بنجاح")
            edit_window.destroy()

            # تحديث البيانات المعروضة
            self.update_statistics()
            self.update_students_tree()
            self.update_attendance_display()

        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء حفظ التغييرات: {str(e)}")

    save_btn = tk.Button(
        buttons_frame,
        text="حفظ التغييرات",
        font=self.fonts["text_bold"],
        bg=self.colors["success"],
        fg="white",
        padx=15, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=save_changes
    )
    save_btn.pack(side=tk.LEFT, padx=10)

    cancel_btn = tk.Button(
        buttons_frame,
        text="إلغاء",
        font=self.fonts["text_bold"],
        bg=self.colors["danger"],
        fg="white",
        padx=15, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=edit_window.destroy
    )
    cancel_btn.pack(side=tk.RIGHT, padx=10)

def process_course_import_arabic(self, file_path, course_name, is_multi_section, sections_count, update_mode):
    """
    معالجة استيراد دورة من ملف Excel
    مع دعم الأعمدة باللغة العربية

    المعلمات:
        file_path (str): مسار ملف Excel
        course_name (str): اسم الدورة
        is_multi_section (bool): هل الدورة متعددة الفصول
        sections_count (int): عدد الفصول إذا كانت الدورة متعددة الفصول
        update_mode (bool): هل يتم نقل المتدربين من الدورات الأخرى (True) أو تخطيهم (False)
    """
    try:
        # إنشاء نافذة حالة لإظهار تقدم العملية
        progress_window = tk.Toplevel(self.root)
        progress_window.title("استيراد الدورة")
        progress_window.geometry("400x150")
        progress_window.configure(bg=self.colors["light"])
        progress_window.transient(self.root)
        progress_window.grab_set()

        # توسيط النافذة
        x = (progress_window.winfo_screenwidth() - 400) // 2
        y = (progress_window.winfo_screenheight() - 150) // 2
        progress_window.geometry(f"400x150+{x}+{y}")

        tk.Label(
            progress_window,
            text=f"جاري استيراد دورة '{course_name}'...",
            font=self.fonts["text_bold"],
            bg=self.colors["light"],
            pady=10
        ).pack()

        progress_var = tk.DoubleVar()
        progress_bar = ttk.Progressbar(
            progress_window,
            variable=progress_var,
            maximum=100,
            length=350
        )
        progress_bar.pack(pady=10)

        status_label = tk.Label(
            progress_window,
            text="جاري قراءة ملف Excel...",
            font=self.fonts["text"],
            bg=self.colors["light"]
        )
        status_label.pack(pady=5)

        progress_window.update()

        # قراءة ملف Excel
        df = pd.read_excel(file_path)

        # الخطوة 1: التحقق من الأعمدة المطلوبة وتوحيد أسماء الأعمدة
        progress_var.set(10)
        status_label.config(text="التحقق من بنية البيانات...")
        progress_window.update()

        # تعريف جدول ترجمة الأعمدة من العربية إلى الإنجليزية
        column_mapping = {
            'الاسم': 'name',
            'رقم الهوية': 'national_id',
            'الرتبة': 'rank',
            'رقم الجوال': 'phone',
            'name': 'name',
            'national_id': 'national_id',
            'rank': 'rank',
            'phone': 'phone'
        }

        # التحقق مما إذا كانت الأعمدة المطلوبة موجودة (بالعربي أو الإنجليزي)
        has_name = any(col in ["الاسم", "name"] for col in df.columns)
        has_id = any(col in ["رقم الهوية", "national_id"] for col in df.columns)

        if not (has_name and has_id):
            progress_window.destroy()
            messagebox.showwarning("تحذير",
                                   "يجب أن يحتوي الملف على الأعمدة التالية على الأقل:\n"
                                   "- الاسم (name)\n"
                                   "- رقم الهوية (national_id)")
            return

        # إعادة تسمية الأعمدة للاستخدام الداخلي
        rename_dict = {}
        for orig_col in df.columns:
            if orig_col in column_mapping:
                rename_dict[orig_col] = column_mapping[orig_col]

        if rename_dict:
            df = df.rename(columns=rename_dict)

        # إضافة الأعمدة المفقودة (اختياري) إذا لم تكن موجودة
        if 'rank' not in df.columns:
            df['rank'] = ''
        if 'phone' not in df.columns:
            df['phone'] = ''

        # إضافة عمود الدورة للمتدربين
        df["course"] = course_name

        # الخطوة 2: التعامل مع المتدربين الموجودين
        progress_var.set(20)
        status_label.config(text="تحليل البيانات...")
        progress_window.update()

        cursor = self.conn.cursor()

        # متابعة اعداد الاحصائيات
        imported_count = 0
        skipped_count = 0
        moved_count = 0

        # قائمة لتخزين المتدربين المتخطين
        skipped_students = []

        # قائمة لتخزين بيانات المتدربين المستوردين
        imported_students = []

        # الخطوة 3: استيراد البيانات
        progress_var.set(30)
        status_label.config(text="جاري استيراد البيانات...")
        progress_window.update()

        total_rows = len(df)

        try:
            with self.conn:
                for i, (_, row) in enumerate(df.iterrows()):
                    # تحديث شريط التقدم
                    progress = 30 + (i / total_rows * 40)  # من 30% إلى 70%
                    progress_var.set(progress)

                    if i % 10 == 0 or i == total_rows - 1:  # تحديث حالة التقدم
                        status_label.config(text=f"استيراد البيانات... ({i + 1}/{total_rows})")
                        progress_window.update()

                    # تأكد من تحويل البيانات إلى نصوص
                    nid = str(row["national_id"]).strip()
                    name = str(row["name"]).strip()
                    rank_ = str(row.get("rank", "")).strip()
                    phone = str(row.get("phone", "")).strip()

                    if not nid or not name:
                        skipped_count += 1
                        continue

                    # التحقق من وجود المتدرب
                    cursor.execute("SELECT COUNT(*), course FROM trainees WHERE national_id=? GROUP BY course",
                                   (nid,))
                    result = cursor.fetchone()

                    if result:  # المتدرب موجود بالفعل
                        exists, existing_course = result

                        if update_mode:  # وضع النقل
                            try:
                                # حذف سجلات الحضور للمتدرب
                                self.conn.execute("DELETE FROM attendance WHERE national_id=?", (nid,))
                                # حذف المتدرب من جدول الفصول إذا كان موجوداً
                                self.conn.execute("DELETE FROM student_sections WHERE national_id=?", (nid,))
                                # حذف المتدرب
                                self.conn.execute("DELETE FROM trainees WHERE national_id=?", (nid,))
                                # إعادة إدخال المتدرب بالدورة الجديدة
                                self.conn.execute("""
                                    INSERT INTO trainees (national_id, name, rank, course, phone)
                                    VALUES (?, ?, ?, ?, ?)
                                """, (nid, name, rank_, course_name, phone))
                                moved_count += 1

                                # إضافة المتدرب إلى القائمة للتوزيع لاحقاً
                                imported_students.append((nid, name))

                            except Exception as e:
                                print(f"خطأ في نقل المتدرب {nid}: {str(e)}")
                                skipped_count += 1
                                skipped_students.append({
                                    "id": nid,
                                    "name": name,
                                    "course": existing_course,
                                    "reason": f"خطأ أثناء النقل: {str(e)}"
                                })
                        else:  # وضع التخطي
                            skipped_count += 1
                            skipped_students.append({
                                "id": nid,
                                "name": name,
                                "course": existing_course,
                                "reason": "موجود في دورة أخرى"
                            })
                        continue

                    # إضافة متدرب جديد
                    self.conn.execute("""
                        INSERT INTO trainees (national_id, name, rank, course, phone)
                        VALUES (?, ?, ?, ?, ?)
                    """, (nid, name, rank_, course_name, phone))
                    imported_count += 1

                    # إضافة المتدرب إلى القائمة للتوزيع لاحقاً
                    imported_students.append((nid, name))

                # الخطوة 4: إنشاء الفصول وتوزيع المتدربين
                if is_multi_section and (imported_count > 0 or moved_count > 0):
                    progress_var.set(75)
                    status_label.config(text="إنشاء الفصول وتوزيع المتدربين...")
                    progress_window.update()

                    current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

                    # إنشاء فصول بالعدد المطلوب
                    section_ids = []
                    for i in range(1, sections_count + 1):
                        section_name = f"فصل {i}"
                        self.conn.execute("""
                            INSERT INTO course_sections (course_name, section_name, created_date)
                            VALUES (?, ?, ?)
                        """, (course_name, section_name, current_date))

                        # الحصول على معرف الفصل المضاف
                        cursor.execute("SELECT last_insert_rowid()")
                        section_id = cursor.fetchone()[0]
                        section_ids.append((section_id, section_name))

                    # ترتيب قائمة المتدربين حسب الاسم
                    imported_students.sort(key=lambda x: x[1])

                    # حساب عدد المتدربين لكل فصل
                    total_students = len(imported_students)
                    students_per_section = total_students // sections_count
                    remainder = total_students % sections_count

                    # توزيع المتدربين على الفصول
                    current_index = 0
                    for i, (section_id, section_name) in enumerate(section_ids):
                        # حساب عدد المتدربين في هذا الفصل
                        section_student_count = students_per_section
                        if i < remainder:
                            section_student_count += 1

                        # إضافة المتدربين لهذا الفصل
                        for j in range(section_student_count):
                            if current_index < total_students:
                                student_id, _ = imported_students[current_index]
                                self.conn.execute("""
                                    INSERT OR REPLACE INTO student_sections
                                    (national_id, course_name, section_name, assigned_date)
                                    VALUES (?, ?, ?, ?)
                                """, (student_id, course_name, section_name, current_date))
                                current_index += 1

                # التعديل الجديد: إنشاء فصل واحد افتراضي للدورات غير متعددة الفصول
                elif (imported_count > 0 or moved_count > 0):  # إضافة هذا الشرط للدورات غير متعددة الفصول
                    # إنشاء فصل واحد افتراضي
                    progress_var.set(75)
                    status_label.config(text="إنشاء فصل واحد وتوزيع المتدربين...")
                    progress_window.update()

                    current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    section_name = "فصل 1"  # أو "فصل 1" حسب تفضيلك

                    self.conn.execute("""
                        INSERT INTO course_sections (course_name, section_name, created_date)
                        VALUES (?, ?, ?)
                    """, (course_name, section_name, current_date))

                    # توزيع جميع المتدربين على الفصل الوحيد
                    for student_id, student_name in imported_students:
                        self.conn.execute("""
                            INSERT OR REPLACE INTO student_sections
                            (national_id, course_name, section_name, assigned_date)
                            VALUES (?, ?, ?, ?)
                        """, (student_id, course_name, section_name, current_date))

        except Exception as e:
            progress_window.destroy()
            messagebox.showerror("خطأ", f"حدث خطأ أثناء استيراد البيانات: {str(e)}")
            return

        # التحديث النهائي
        progress_var.set(95)
        status_label.config(text="إكمال عملية الاستيراد...")
        progress_window.update()

        # تحديث الإحصائيات
        self.update_statistics()
        self.update_students_tree()

        # إغلاق نافذة التقدم
        progress_window.destroy()

        # عرض نتائج الاستيراد
        result_message = f"تم استيراد دورة '{course_name}' بنجاح.\n\n"

        if imported_count > 0:
            result_message += f"• تم استيراد {imported_count} متدرب جديد.\n"
        if moved_count > 0:
            result_message += f"• تم نقل {moved_count} متدرب من دورات أخرى.\n"
        if skipped_count > 0:
            result_message += f"• تم تخطي {skipped_count} متدرب.\n"

        if is_multi_section:
            result_message += f"\nتم إنشاء {sections_count} فصل للدورة وتوزيع المتدربين عليها بالترتيب الأبجدي."
        else:
            result_message += f"\nتم إنشاء فصل واحد للدورة (الفصل الرئيسي) وتوزيع المتدربين عليه."

        messagebox.showinfo("تقرير الاستيراد", result_message)

        # إذا كان هناك متدربين متخطون، عرض تفاصيلهم
        if skipped_students:
            skipped_details = "تفاصيل المتدربين المتخطين:\n\n"
            for i, student in enumerate(skipped_students, 1):
                skipped_details += f"{i}. الاسم: {student['name']}, الهوية: {student['id']}\n"
                skipped_details += f"   السبب: {student['reason']} - الدورة الحالية: {student['course']}\n"

            messagebox.showinfo("تفاصيل المتدربين المتخطين", skipped_details)

    except Exception as e:
        try:
            progress_window.destroy()
        except:
            pass
        messagebox.showerror("خطأ", f"حدث خطأ أثناء استيراد الدورة: {str(e)}")

def optimize_database(self):
    """تحسين وضبط أداء قاعدة البيانات"""
    try:
        cursor = self.conn.cursor()

        # تشغيل أمر VACUUM لإعادة تنظيم قاعدة البيانات
        cursor.execute("VACUUM")

        # تحليل قاعدة البيانات
        cursor.execute("ANALYZE")

        # الحصول على إحصائيات
        cursor.execute("PRAGMA page_count")
        page_count = cursor.fetchone()[0]

        cursor.execute("PRAGMA page_size")
        page_size = cursor.fetchone()[0]

        # حساب حجم قاعدة البيانات
        db_size_mb = (page_count * page_size) / (1024 * 1024)

        messagebox.showinfo(
            "تحسين قاعدة البيانات",
            f"تم تحسين وضبط قاعدة البيانات بنجاح.\n"
            f"حجم قاعدة البيانات: {db_size_mb:.2f} ميجابايت"
        )

    except Exception as e:
        messagebox.showerror("خطأ", f"حدث خطأ أثناء تحسين قاعدة البيانات: {str(e)}")

def view_student_profile(self):
    selected_item = self.students_tree.selection()
    if not selected_item:
        messagebox.showinfo("تنبيه", "الرجاء تحديد متدرب من القائمة")
        return
    values = self.students_tree.item(selected_item, "values")
    if not values:
        return

def view_student_profile(self):
    selected_item = self.students_tree.selection()
    if not selected_item:
        messagebox.showinfo("تنبيه", "الرجاء تحديد متدرب من القائمة")
        return
    values = self.students_tree.item(selected_item, "values")
    if not values:
        return

    nid = values[0]
    name = values[1]

    # الحصول على معلومات المتدرب بشكل منفصل
    cursor = self.conn.cursor()
    cursor.execute("SELECT * FROM trainees WHERE national_id=?", (nid,))
    student = cursor.fetchone()

    if not student:
        messagebox.showinfo("تنبيه", "لا توجد معلومات عن هذا المتدرب")
        return

    # الحصول على سجلات الحضور بشكل منفصل
    cursor.execute("""
        SELECT id, national_id, name, rank, course, time, date, status, original_status, 
               registered_by, excuse_reason, updated_by, updated_at, modification_reason
        FROM attendance 
        WHERE national_id=?
        ORDER BY date DESC
    """, (nid,))
    attendance_records = cursor.fetchall()

    # تعريف المتغيرات الإحصائية مسبقًا بقيم افتراضية
    present_count = 0
    absent_count = 0
    late_count = 0
    excused_count = 0
    not_started_count = 0
    field_app_count = 0
    student_day_count = 0
    evening_remote_count = 0

    # حساب الإحصائيات مباشرة من قاعدة البيانات
    cursor.execute("""
        SELECT 
            COUNT(CASE WHEN status = 'حاضر' THEN 1 END) as present_count,
            COUNT(CASE WHEN status = 'غائب' THEN 1 END) as absent_count,
            COUNT(CASE WHEN status = 'متأخر' THEN 1 END) as late_count,
            COUNT(CASE WHEN status = 'غائب بعذر' THEN 1 END) as excused_count,
            COUNT(CASE WHEN status = 'لم يباشر' THEN 1 END) as not_started_count,
            COUNT(CASE WHEN status = 'تطبيق ميداني' THEN 1 END) as field_app_count,
            COUNT(CASE WHEN status = 'يوم طالب' THEN 1 END) as student_day_count,
            COUNT(CASE WHEN status = 'مسائية / عن بعد' THEN 1 END) as evening_remote_count,
            COUNT(CASE WHEN status = 'حالة وفاة' THEN 1 END) as death_case_count,
            COUNT(CASE WHEN status = 'منوم' THEN 1 END) as hospital_count
        FROM attendance
        WHERE national_id=?
    """, (nid,))

    stats = cursor.fetchone()
    if stats:
        present_count = stats[0] or 0
        absent_count = stats[1] or 0
        late_count = stats[2] or 0
        excused_count = stats[3] or 0
        not_started_count = stats[4] or 0
        field_app_count = stats[5] or 0
        student_day_count = stats[6] or 0
        evening_remote_count = stats[7] or 0
        death_case_count = stats[8] or 0  # إضافة جديدة
        hospital_count = stats[9] or 0  # إضافة جديدة

    # تصنيف السجلات حسب الحالة
    not_started_records = []
    absent_records = []
    late_records = []
    excused_records = []
    present_records = []
    field_application_records = []
    student_day_records = []
    evening_remote_records = []
    death_case_records = []  # قائمة لحالات الوفاة
    hospital_records = []  # قائمة للمنومين

    for record in attendance_records:
        status = record[7]  # حقل الحالة
        if status == "حاضر":
            present_records.append(record)
        elif status == "غائب":
            absent_records.append(record)
        elif status == "متأخر":
            late_records.append(record)
        elif status == "غائب بعذر":
            excused_records.append(record)
        elif status == "لم يباشر":
            not_started_records.append(record)
        elif status == "تطبيق ميداني":
            field_application_records.append(record)
        elif status == "يوم طالب":
            student_day_records.append(record)
        elif status == "مسائية / عن بعد":
            evening_remote_records.append(record)
        elif status == "حالة وفاة":
            death_case_records.append(record)
        elif status == "منوم":
            hospital_records.append(record)

    # إنشاء نافذة ملف المتدرب
    profile_window = tk.Toplevel(self.root)
    profile_window.title(f"ملف المتدرب - {name}")
    profile_window.geometry("1000x800")  # زيادة الارتفاع
    profile_window.minsize(800, 600)
    profile_window.configure(bg=self.colors["light"])
    profile_window.resizable(True, True)

    x = (profile_window.winfo_screenwidth() - 1000) // 2
    y = (profile_window.winfo_screenheight() - 800) // 2
    profile_window.geometry(f"1000x800+{x}+{y}")

    header_frame = tk.Frame(profile_window, bg=self.colors["primary"], padx=20, pady=15)
    header_frame.pack(fill=tk.X)

    # إضافة حالة الاستبعاد في العنوان إذا كان المتدرب مستبعد
    if student[5] == 1:  # is_excluded
        exclusion_status = "- مستبعد"
        status_color = self.colors["excluded"]
    else:
        exclusion_status = ""
        status_color = self.colors["primary"]

    tk.Label(header_frame, text=f"ملف المتدرب: {name} {exclusion_status}",
             font=self.fonts["large_title"], bg=self.colors["primary"], fg="white").pack(anchor=tk.W)

    tk.Label(header_frame,
             text=f"رقم الهوية: {nid} | الرتبة: {values[2]} | الدورة: {values[3]} | الجوال: {values[4]}",
             font=self.fonts["text"], bg=self.colors["primary"], fg="white"
             ).pack(anchor=tk.W, pady=(5, 0))

    # إضافة سبب الاستبعاد إذا كان المتدرب مستبعد
    if student[5] == 1:  # is_excluded
        tk.Label(header_frame,
                 text=f"سبب الاستبعاد: {student[6]} | تاريخ الاستبعاد: {student[7]}",
                 font=self.fonts["text_bold"], bg=self.colors["primary"], fg="#ffcdd2"
                 ).pack(anchor=tk.W, pady=(5, 0))

    summary_frame = tk.Frame(profile_window, bg=self.colors["light"], padx=20, pady=15)
    summary_frame.pack(fill=tk.X)

    # إضافة زر استبعاد/إلغاء استبعاد المتدرب في أعلى النافذة
    exclusion_frame = tk.Frame(summary_frame, bg=self.colors["light"], pady=5)
    exclusion_frame.pack(fill=tk.X)

    if student[5] == 1:  # المتدرب مستبعد
        exclude_button = tk.Button(
            exclusion_frame,
            text="إلغاء استبعاد المتدرب",
            font=self.fonts["text_bold"],
            bg=self.colors["success"],
            fg="white",
            padx=15, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: self.toggle_student_exclusion(nid, False, profile_window)
        )
        exclude_button.pack(pady=10)
    else:
        exclude_button = tk.Button(
            exclusion_frame,
            text="استبعاد المتدرب",
            font=self.fonts["text_bold"],
            bg=self.colors["excluded"],
            fg="white",
            padx=15, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=lambda: self.toggle_student_exclusion(nid, True, profile_window)
        )
        exclude_button.pack(pady=10)

    stats_frame = tk.Frame(summary_frame, bg=self.colors["light"])
    stats_frame.pack(fill=tk.X)

    # استخدام الإحصائيات المحسوبة من قاعدة البيانات
    attendance_stats = [
        # السجلات الموجودة
        ("إجمالي أيام الحضور", present_count, self.colors["success"]),
        ("أيام التأخير", late_count, self.colors["late"]),
        ("أيام الغياب", absent_count, self.colors["danger"]),
        ("غياب بعذر", excused_count, self.colors["excused"]),
        ("لم يباشر", not_started_count, self.colors["not_started"]),
        ("تطبيق ميداني", field_app_count, self.colors["field_application"]),
        ("يوم طالب", student_day_count, self.colors["student_day"]),
        ("مسائية / عن بعد", evening_remote_count, self.colors["evening_remote"]),
        # إضافة الحالات الجديدة
        ("حالة وفاة", death_case_count, self.colors["death_case"]),
        ("منوم", hospital_count, self.colors["hospital"])
    ]

    for title, count, color in attendance_stats:
        stat_frame = tk.Frame(stats_frame, bg=self.colors["light"], bd=1, relief=tk.RIDGE, padx=5, pady=5)
        stat_frame.pack(side=tk.LEFT, expand=True, fill=tk.X, padx=5)
        tk.Label(stat_frame, text=title, font=self.fonts["text_bold"], bg=color, fg="white", padx=5, pady=5).pack(
            fill=tk.X)
        tk.Label(stat_frame, text=str(count), font=self.fonts["title"], bg=self.colors["light"]).pack(fill=tk.X,
                                                                                                      pady=5)

    details_notebook = ttk.Notebook(profile_window)
    details_notebook.pack(fill=tk.BOTH, expand=True, padx=20, pady=15)

    details_notebook = ttk.Notebook(profile_window)
    details_notebook.pack(fill=tk.BOTH, expand=True, padx=20, pady=15)

    # إضافة تبويب المخالفات والإجراءات التأديبية
    violations_frame = tk.Frame(details_notebook, bg=self.colors["light"])
    details_notebook.add(violations_frame, text="المخالفات والإجراءات التأديبية")

    # استرجاع سجل المخالفات الخاص بالمتدرب
    cursor.execute("""
        SELECT id, violation_date, violation_type, description, 
               action_taken, action_date, recorded_by, notes
        FROM student_violations
        WHERE national_id=?
        ORDER BY violation_date DESC
    """, (nid,))
    violations_records = cursor.fetchall()

    if violations_records:
        # إنشاء جدول لعرض المخالفات
        violations_tree = self.create_violations_table(violations_frame, violations_records)
    else:
        tk.Label(violations_frame, text="لا توجد مخالفات أو إجراءات تأديبية مسجلة",
                 font=self.fonts["subtitle"], bg=self.colors["light"], fg=self.colors["dark"],
                 pady=20).pack()

    # زر تسجيل مخالفة جديدة - خارج الشرط ليظهر دائمًا
    add_violation_btn = tk.Button(
        violations_frame,
        text="تسجيل مخالفة جديدة",
        font=self.fonts["text_bold"],
        bg=self.colors["warning"],
        fg="white",
        padx=10, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=lambda: self.add_student_violation(nid, name, profile_window)
    )
    add_violation_btn.pack(pady=10)

    # دالات إنشاء الجداول اعتمادًا على صلاحيات المستخدم
    def create_attendance_detail_table(parent_frame, records):
        table_frame = tk.Frame(parent_frame, bg=self.colors["light"])
        table_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        scrollbar = tk.Scrollbar(table_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # تحديد الأعمدة بناءً على صلاحيات المستخدم
        if self.current_user["permissions"]["can_view_edit_history"]:
            columns = ["date", "time", "registered_col", "updated_col", "mod_reason", "updated_when"]
        else:
            columns = ["date", "time", "registered_col"]

        detail_tree = ttk.Treeview(table_frame, columns=columns, show="headings",
                                   yscrollcommand=scrollbar.set, style="Profile.Treeview")

        detail_tree.heading("date", text="التاريخ")
        detail_tree.column("date", width=100, anchor=tk.CENTER)
        detail_tree.heading("time", text="الوقت")
        detail_tree.column("time", width=100, anchor=tk.CENTER)
        detail_tree.heading("registered_col", text="سجّل بواسطة")
        detail_tree.column("registered_col", width=180, anchor=tk.W)

        # إضافة أعمدة التعديل فقط للمستخدمين المصرح لهم
        if self.current_user["permissions"]["can_view_edit_history"]:
            detail_tree.heading("updated_col", text="من عدّل")
            detail_tree.column("updated_col", width=180, anchor=tk.W)
            detail_tree.heading("mod_reason", text="سبب التعديل")
            detail_tree.column("mod_reason", width=140, anchor=tk.W)
            detail_tree.heading("updated_when", text="وقت آخر تعديل")
            detail_tree.column("updated_when", width=150, anchor=tk.W)

        for rec in records:
            date_ = rec[6]
            time_ = rec[5]
            orig_status = rec[8] if rec[8] else rec[7]
            reg_by_ = rec[9]
            upd_by_ = rec[11] if rec[11] else ""
            upd_at_ = rec[12] if rec[12] else ""
            # تعديل مهم: عرض سبب التعديل فقط إذا كان هناك تعديل
            mod_reason_ = rec[13] if len(rec) > 13 and rec[13] and upd_by_ else ""
            registered_text = f"{reg_by_} (الحالة الاصلية: {orig_status})"

            if self.current_user["permissions"]["can_view_edit_history"]:
                if upd_by_:
                    updated_text = f"{upd_by_} عدّلها إلى: {rec[7]}"
                else:
                    updated_text = ""
                detail_tree.insert("", tk.END,
                                   values=(date_, time_, registered_text, updated_text, mod_reason_, upd_at_))
            else:
                detail_tree.insert("", tk.END, values=(date_, time_, registered_text))

        detail_tree.pack(fill=tk.BOTH, expand=True)
        scrollbar.config(command=detail_tree.yview)

    def create_excused_detail_table(parent_frame, records):
        table_frame = tk.Frame(parent_frame, bg=self.colors["light"])
        table_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        scrollbar = tk.Scrollbar(table_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # تحديد الأعمدة بناءً على صلاحيات المستخدم
        if self.current_user["permissions"]["can_view_edit_history"]:
            columns = ["date", "time", "registered_col", "excuse_reason", "updated_col", "mod_reason",
                       "updated_when"]
        else:
            columns = ["date", "time", "registered_col", "excuse_reason"]

        detail_tree = ttk.Treeview(table_frame, columns=columns, show="headings",
                                   yscrollcommand=scrollbar.set, style="Profile.Treeview")

        detail_tree.heading("date", text="التاريخ")
        detail_tree.column("date", width=100, anchor=tk.CENTER)
        detail_tree.heading("time", text="الوقت")
        detail_tree.column("time", width=100, anchor=tk.CENTER)
        detail_tree.heading("registered_col", text="سجّل بواسطة")
        detail_tree.column("registered_col", width=150, anchor=tk.W)
        detail_tree.heading("excuse_reason", text="سبب الغياب")
        detail_tree.column("excuse_reason", width=120, anchor=tk.W)

        # إضافة أعمدة التعديل فقط للمستخدمين المصرح لهم
        if self.current_user["permissions"]["can_view_edit_history"]:
            detail_tree.heading("updated_col", text="من عدّل")
            detail_tree.column("updated_col", width=120, anchor=tk.W)
            detail_tree.heading("mod_reason", text="سبب التعديل")
            detail_tree.column("mod_reason", width=140, anchor=tk.W)
            detail_tree.heading("updated_when", text="وقت آخر تعديل")
            detail_tree.column("updated_when", width=120, anchor=tk.W)

        for rec in records:
            date_ = rec[6]
            time_ = rec[5]
            orig_status = rec[8] if rec[8] else rec[7]
            reg_by_ = rec[9]
            excuse_ = rec[10] if rec[10] else "لا يوجد"
            upd_by_ = rec[11] if rec[11] else ""
            upd_at_ = rec[12] if rec[12] else ""
            # تعديل مهم: عرض سبب التعديل فقط إذا كان هناك تعديل (upd_by_ غير فارغ)
            mod_reason_ = rec[13] if len(rec) > 13 and rec[13] and upd_by_ else ""

            registered_text = f"{reg_by_} (الحالة الاصلية: {orig_status})"

            if self.current_user["permissions"]["can_view_edit_history"]:
                if upd_by_:
                    updated_text = f"{upd_by_} عدّلها إلى: {rec[7]}"
                else:
                    updated_text = ""
                detail_tree.insert("", tk.END,
                                   values=(
                                       date_, time_, registered_text, excuse_, updated_text, mod_reason_, upd_at_))
            else:
                detail_tree.insert("", tk.END, values=(date_, time_, registered_text, excuse_))

        detail_tree.pack(fill=tk.BOTH, expand=True)
        scrollbar.config(command=detail_tree.yview)

    # تبويبات مفصلة
    not_started_frame = tk.Frame(details_notebook, bg=self.colors["light"])
    details_notebook.add(not_started_frame, text=f"لم يباشر ({len(not_started_records)})")
    if not_started_records:
        create_attendance_detail_table(not_started_frame, not_started_records)
    else:
        tk.Label(not_started_frame, text="لا توجد أيام (لم يباشر)", font=self.fonts["subtitle"],
                 bg=self.colors["light"], fg=self.colors["dark"], pady=20).pack()

    absent_frame = tk.Frame(details_notebook, bg=self.colors["light"])
    details_notebook.add(absent_frame, text=f"الغياب ({len(absent_records)})")
    if absent_records:
        create_attendance_detail_table(absent_frame, absent_records)
    else:
        tk.Label(absent_frame, text="لا توجد أيام غياب", font=self.fonts["subtitle"],
                 bg=self.colors["light"], fg=self.colors["dark"], pady=20).pack()

    late_frame = tk.Frame(details_notebook, bg=self.colors["light"])
    details_notebook.add(late_frame, text=f"التأخير ({len(late_records)})")
    if late_records:
        create_attendance_detail_table(late_frame, late_records)
    else:
        tk.Label(late_frame, text="لا توجد أيام تأخير", font=self.fonts["subtitle"],
                 bg=self.colors["light"], fg=self.colors["dark"], pady=20).pack()

    excused_frame = tk.Frame(details_notebook, bg=self.colors["light"])
    details_notebook.add(excused_frame, text=f"غياب بعذر ({len(excused_records)})")
    if excused_records:
        create_excused_detail_table(excused_frame, excused_records)
    else:
        tk.Label(excused_frame, text="لا توجد أيام غياب بعذر", font=self.fonts["subtitle"],
                 bg=self.colors["light"], fg=self.colors["dark"], pady=20).pack()

    present_frame = tk.Frame(details_notebook, bg=self.colors["light"])
    details_notebook.add(present_frame, text=f"الحضور ({len(present_records)})")
    if present_records:
        create_attendance_detail_table(present_frame, present_records)
    else:
        tk.Label(present_frame, text="لا توجد أيام حضور", font=self.fonts["subtitle"],
                 bg=self.colors["light"], fg=self.colors["dark"], pady=20).pack()

    # إضافة تبويبات للحالات الجديدة
    field_app_frame = tk.Frame(details_notebook, bg=self.colors["light"])
    details_notebook.add(field_app_frame, text=f"تطبيق ميداني ({len(field_application_records)})")
    if field_application_records:
        create_attendance_detail_table(field_app_frame, field_application_records)
    else:
        tk.Label(field_app_frame, text="لا توجد أيام تطبيق ميداني", font=self.fonts["subtitle"],
                 bg=self.colors["light"], fg=self.colors["dark"], pady=20).pack()

    student_day_frame = tk.Frame(details_notebook, bg=self.colors["light"])
    details_notebook.add(student_day_frame, text=f"يوم طالب ({len(student_day_records)})")
    if student_day_records:
        create_attendance_detail_table(student_day_frame, student_day_records)
    else:
        tk.Label(student_day_frame, text="لا توجد أيام متدرب", font=self.fonts["subtitle"],
                 bg=self.colors["light"], fg=self.colors["dark"], pady=20).pack()

    evening_remote_frame = tk.Frame(details_notebook, bg=self.colors["light"])
    details_notebook.add(evening_remote_frame, text=f"مسائية / عن بعد ({len(evening_remote_records)})")
    if evening_remote_records:
        create_attendance_detail_table(evening_remote_frame, evening_remote_records)
    else:
        tk.Label(evening_remote_frame, text="لا توجد أيام مسائية / عن بعد", font=self.fonts["subtitle"],
                 bg=self.colors["light"], fg=self.colors["dark"], pady=20).pack()
    # بعد التبويبات الموجودة
    death_case_frame = tk.Frame(details_notebook, bg=self.colors["light"])
    details_notebook.add(death_case_frame, text=f"حالة وفاة ({len(death_case_records)})")
    if death_case_records:
        create_excused_detail_table(death_case_frame, death_case_records)
    else:
        tk.Label(death_case_frame, text="لا توجد حالات وفاة", font=self.fonts["subtitle"],
                 bg=self.colors["light"], fg=self.colors["dark"], pady=20).pack()

    hospital_frame = tk.Frame(details_notebook, bg=self.colors["light"])
    details_notebook.add(hospital_frame, text=f"منوم ({len(hospital_records)})")
    if hospital_records:
        create_excused_detail_table(hospital_frame, hospital_records)
    else:
        tk.Label(hospital_frame, text="لا توجد حالات منوم", font=self.fonts["subtitle"],
                 bg=self.colors["light"], fg=self.colors["dark"], pady=20).pack()

    # إضافة إطار للأزرار
    button_frame = tk.Frame(profile_window, bg=self.colors["light"])
    button_frame.pack(pady=15)

    # زر تصدير بيانات المتدرب
    export_btn = tk.Button(
        button_frame,
        text="تصدير بيانات المتدرب",
        font=self.fonts["text_bold"],
        bg=self.colors["primary"],
        fg="white",
        padx=15, pady=5,
        bd=0,
        relief=tk.FLAT,
        cursor="hand2",
        command=lambda: self.export_student_to_word(student, attendance_records)
    )
    export_btn.pack(side=tk.LEFT, padx=10)

    # إضافة زر تصدير محاضر غيابات المتدرب
    absence_report_btn = tk.Button(
        button_frame,
        text="تصدير محاضر غيابات المتدرب",
        font=self.fonts["text_bold"],
        bg="#8E44AD",  # لون أرجواني
        fg="white",
        padx=15, pady=5,
        bd=0,
        relief=tk.FLAT,
        cursor="hand2",
        command=lambda: self.export_student_absence_reports(student, attendance_records)
    )
    absence_report_btn.pack(side=tk.LEFT, padx=10)

    # إضافة زر تصدير المخالفات
    violations_report_btn = tk.Button(
        button_frame,
        text="تصدير تقرير المخالفات",
        font=self.fonts["text_bold"],
        bg="#9C27B0",  # لون بنفسجي
        fg="white",
        padx=15, pady=5,
        bd=0,
        relief=tk.FLAT,
        cursor="hand2",
        command=lambda: self.export_student_violations_report(student, violations_records)
    )
    violations_report_btn.pack(side=tk.LEFT, padx=10)

    # زر الإغلاق
    close_btn = tk.Button(
        button_frame,
        text="إغلاق",
        font=self.fonts["text_bold"],
        bg=self.colors["dark"],
        fg="white",
        padx=15, pady=5,
        bd=0,
        relief=tk.FLAT,
        cursor="hand2",
        command=profile_window.destroy
    )
    close_btn.pack(side=tk.LEFT, padx=10)
